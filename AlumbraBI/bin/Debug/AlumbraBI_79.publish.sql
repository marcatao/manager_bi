/*
Deployment script for Auxiliar

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "Auxiliar"
:setvar DefaultFilePrefix "Auxiliar"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL14.SOLO\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL14.SOLO\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET PAGE_VERIFY NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367)) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET TEMPORAL_HISTORY_RETENTION ON 
            WITH ROLLBACK IMMEDIATE;
    END


GO
PRINT N'Rename refactoring operation with key 9fcec65a-8a57-44cc-be23-462e80cd03a5 is skipped, element [dbo].[DIM_FILIAL].[Id] (SqlSimpleColumn) will not be renamed to CD_FILIAL';


GO
PRINT N'Rename refactoring operation with key 4ad20753-2a7c-48cf-b02f-13ad4a1de088 is skipped, element [dbo].[DIM_CLIENTE].[Id] (SqlSimpleColumn) will not be renamed to CD_CLIENTE';


GO
PRINT N'Rename refactoring operation with key cbb73f3d-6687-40ed-a325-88e36d54f9ef is skipped, element [dbo].[DIM_CLIENTE].[CD_ESTADO] (SqlSimpleColumn) will not be renamed to CD_UF';


GO
PRINT N'Rename refactoring operation with key 74f1be31-0341-4375-b1b4-4328d099d38b is skipped, element [dbo].[DIM_FILIAL].[DT_SINCRONIZACAO] (SqlSimpleColumn) will not be renamed to DT_SINC';


GO
PRINT N'Rename refactoring operation with key ead72c12-1c1b-403e-9f43-1b54e9b43bec, 6bcf523a-14ea-479a-a4d7-8376ac408e65, cb3951c3-0d49-4b25-8349-39c345e474b6 is skipped, element [dbo].[DIM_LINHAS].[Id] (SqlSimpleColumn) will not be renamed to CD_LINHA_COTA';


GO
PRINT N'Rename refactoring operation with key 9481b11b-edab-4c7d-beb6-ecbc35e275fb, 057e8583-375b-4259-9010-e064e8f0dd66 is skipped, element [dbo].[DIM_TEMPO].[Id] (SqlSimpleColumn) will not be renamed to Cod_Dia';


GO
PRINT N'Rename refactoring operation with key c9e10eee-7a11-4699-8fb8-c86d292b3f28, 562b0b27-a35c-4722-ad58-394efd3507ff is skipped, element [dbo].[DIM_TEMPO].[NONME_DIA_SEMANA] (SqlSimpleColumn) will not be renamed to Nome_dia_Semana';


GO
PRINT N'Rename refactoring operation with key 147f6a67-4f0a-4270-8b39-3bdb21b96428 is skipped, element [dbo].[DIM_TEMPO].[DATA] (SqlSimpleColumn) will not be renamed to Data';


GO
PRINT N'Rename refactoring operation with key 162d6e5b-bd3b-4d01-95e6-ce6d863e5c2e is skipped, element [dbo].[DIM_TEMPO].[CD_SEMANA] (SqlSimpleColumn) will not be renamed to Cod_Semana';


GO
PRINT N'Rename refactoring operation with key ffbd9db3-8213-4abe-b13a-a816b20ac019 is skipped, element [dbo].[DIM_TEMPO].[COD_MES] (SqlSimpleColumn) will not be renamed to Cod_Mes';


GO
PRINT N'Rename refactoring operation with key a4ebd05b-8876-403f-a27b-94f1767ae40e is skipped, element [dbo].[DIM_TEMPO].[NOME_MES] (SqlSimpleColumn) will not be renamed to Nome_Mes';


GO
PRINT N'Rename refactoring operation with key 5299d496-d605-4f6b-8ae3-7bfec8168fe3, a1423f7d-e606-4852-b021-d0e9df3939c8 is skipped, element [dbo].[DIM_TEMPO].[Cod_Trimes] (SqlSimpleColumn) will not be renamed to Cod_Trimestre_Ano';


GO
PRINT N'Rename refactoring operation with key c646a675-67d5-4591-beb4-0aa015a4db01 is skipped, element [dbo].[DIM_TEMPO].[E_Dia_Semana] (SqlSimpleColumn) will not be renamed to Tipo_Dia';


GO
PRINT N'Rename refactoring operation with key d11e0d82-8703-401d-ad8e-b94443d68932, ed5cac98-bbca-48dc-8e23-e672c4d818ca is skipped, element [dbo].[FATO_001].[Id] (SqlSimpleColumn) will not be renamed to Cod_Dia';


GO
PRINT N'Rename refactoring operation with key 16267513-7885-44d3-9459-8d8147636f93 is skipped, element [dbo].[FATO_001].[CD_REGIAO] (SqlSimpleColumn) will not be renamed to CD_LINHA_COTA';


GO
PRINT N'Rename refactoring operation with key 13d05303-d670-4589-b1d8-11f3b61f7420 is skipped, element [dbo].[DIM_DIVISOES].[Id] (SqlSimpleColumn) will not be renamed to CD_DIVISAO';


GO
PRINT N'Rename refactoring operation with key 8564cc18-ab69-4af4-9f95-3067c0946f6a is skipped, element [dbo].[DIM_CLIENTE].[DN_BARIRRO] (SqlSimpleColumn) will not be renamed to DN_BAIRRO';


GO
PRINT N'Rename refactoring operation with key a23994ca-1ed5-419c-8972-dcd581188c1b is skipped, element [dbo].[DIM_CLIENTE].[VL_LIMITE_CREDITO] (SqlSimpleColumn) will not be renamed to VL_LIMITE_CRED';


GO
PRINT N'Rename refactoring operation with key faf97d44-b34a-46f7-83ba-8a671594c2bc is skipped, element [dbo].[DIM_LINHAS].[DN_LINHAPROD] (SqlSimpleColumn) will not be renamed to DN_LINHA_COTA';


GO
PRINT N'Rename refactoring operation with key 387ba600-a880-4bd7-809c-58e124948cc0 is skipped, element [dbo].[FK_FATO_001_DIM_LINHAS] (SqlForeignKeyConstraint) will not be renamed to [FK_FATO_001_DIM_LINHAS_AGRUPADAS]';


GO
PRINT N'Rename refactoring operation with key 93f1dac3-901d-432e-8822-ddeaf06c90c2 is skipped, element [dbo].[DIM_LINHAS_SGE].[Id] (SqlSimpleColumn) will not be renamed to CD_GRUPO';


GO
PRINT N'Rename refactoring operation with key ff4caba7-7065-43c6-b1f9-57c215f6eb62 is skipped, element [dbo].[FK_DIM_LINHAS_SGE_DIM_DIVISAO] (SqlForeignKeyConstraint) will not be renamed to [FK_DIM_LINHAS_SGE_DIM_DIVISOES]';


GO
PRINT N'Rename refactoring operation with key 31870169-b234-4b59-a910-72f229bbef51 is skipped, element [dbo].[FK_DIM_LINHAS_AGRUPADAS_DIM_DIVISAO] (SqlForeignKeyConstraint) will not be renamed to [FK_DIM_LINHAS_AGRUPADAS_DIM_DIVISOES]';


GO
PRINT N'Rename refactoring operation with key fefdb80e-9b0c-4a05-a5b0-f7af6d669640 is skipped, element [dbo].[FATO_001].[QT_VENDIDO] (SqlSimpleColumn) will not be renamed to QT_VENDIDA';


GO
PRINT N'Rename refactoring operation with key 0c419477-8dd7-4e93-9c71-e7bec8e8bf1e is skipped, element [dbo].[FATO_001].[VL_FATURADO] (SqlSimpleColumn) will not be renamed to VL_FATURADA';


GO
PRINT N'Rename refactoring operation with key ff3c197b-0f42-4d5c-8a56-97b12ff67a13 is skipped, element [dbo].[FATO_001].[QT_FATURADO] (SqlSimpleColumn) will not be renamed to QT_FATURADA';


GO
PRINT N'Rename refactoring operation with key 731564d6-041d-42ee-a754-68e17032b440 is skipped, element [dbo].[FATO_001].[VL_VENDIDO] (SqlSimpleColumn) will not be renamed to VL_VENDIDA';


GO
PRINT N'Rename refactoring operation with key 204df8f4-b78f-442a-84a5-0c89368f3e1a is skipped, element [dbo].[DIM_PRODUTOS].[Id] (SqlSimpleColumn) will not be renamed to CD_FILIAL';


GO
PRINT N'Rename refactoring operation with key 62105a64-a117-41c1-b78f-efb03f86eb99 is skipped, element [dbo].[DIM_PRODUTOS].[DN_INTEM_COM] (SqlSimpleColumn) will not be renamed to DN_ITEM_COM';


GO
PRINT N'Rename refactoring operation with key f910433b-2459-4b74-b144-a5672ef97d17 is skipped, element [dbo].[FATO_002].[Id] (SqlSimpleColumn) will not be renamed to Cod_Dia';


GO
PRINT N'Rename refactoring operation with key 43c553c2-f7b4-43bc-80d3-a1a405933dc3 is skipped, element [dbo].[FATO_002].[QT_FATURADA] (SqlSimpleColumn) will not be renamed to QT_VENDIDA';


GO
PRINT N'Rename refactoring operation with key bdd88998-5efd-4191-abc5-073a63c273f7 is skipped, element [dbo].[FATO_002].[VL_FATURADA] (SqlSimpleColumn) will not be renamed to VL_VENDIDO';


GO
PRINT N'Rename refactoring operation with key 5f8b07dc-acfe-43a6-a44a-3a1b6ab77d4e is skipped, element [dbo].[FK_FATO_001_ToTable] (SqlForeignKeyConstraint) will not be renamed to [FK_FATO_001_DIM_PRODUTOS]';


GO
PRINT N'Rename refactoring operation with key 22536a80-8eac-45b6-8968-477be3ac3214 is skipped, element [dbo].[DIM_REPRESENTANTE].[Id] (SqlSimpleColumn) will not be renamed to CD_FILIAL';


GO
PRINT N'Creating [dbo].[DIM_CLIENTE]...';


GO
CREATE TABLE [dbo].[DIM_CLIENTE] (
    [CD_CLIENTE]      INT             NOT NULL,
    [CD_CGCCPF]       CHAR (18)       NULL,
    [DN_FANTASIA]     CHAR (20)       NULL,
    [CD_MUNICIPIO]    CHAR (5)        NULL,
    [DN_MUNICIPIO]    CHAR (35)       NULL,
    [DN_BAIRRO]       CHAR (15)       NULL,
    [CD_CEP]          INT             NULL,
    [NR_ENDERECO]     INT             NULL,
    [CD_UF]           CHAR (4)        NULL,
    [DN_UF]           CHAR (20)       NULL,
    [TP_SITUACAO_SGE] CHAR (1)        NULL,
    [VL_LIMITE_CRED]  NUMERIC (16, 2) NULL,
    [DT_IMPLANTACAO]  DATE            NULL,
    [DT_SINC]         DATETIME        NULL,
    PRIMARY KEY CLUSTERED ([CD_CLIENTE] ASC)
);


GO
PRINT N'Creating [dbo].[DIM_DIVISOES]...';


GO
CREATE TABLE [dbo].[DIM_DIVISOES] (
    [CD_DIVISAO] CHAR (1)      NOT NULL,
    [DN_DIVISAO] NVARCHAR (50) NULL,
    [DT_SINC]    DATETIME      NULL,
    PRIMARY KEY CLUSTERED ([CD_DIVISAO] ASC)
);


GO
PRINT N'Creating [dbo].[DIM_FILIAL]...';


GO
CREATE TABLE [dbo].[DIM_FILIAL] (
    [CD_FILIAL]   SMALLINT  NOT NULL,
    [DN_FANTASIA] CHAR (20) NULL,
    [DN_RAZAO]    CHAR (40) NULL,
    [CD_CGCCPF]   CHAR (18) NULL,
    [DT_SINC]     DATETIME  NULL,
    PRIMARY KEY CLUSTERED ([CD_FILIAL] ASC)
);


GO
PRINT N'Creating [dbo].[DIM_LINHAS_AGRUPADAS]...';


GO
CREATE TABLE [dbo].[DIM_LINHAS_AGRUPADAS] (
    [CD_LINHA_COTA] INT           NOT NULL,
    [DN_LINHA_COTA] VARCHAR (150) NULL,
    [CD_DIVISAO]    CHAR (1)      NULL,
    [DT_SINC]       DATETIME      NULL,
    PRIMARY KEY CLUSTERED ([CD_LINHA_COTA] ASC)
);


GO
PRINT N'Creating [dbo].[DIM_LINHAS_SGE]...';


GO
CREATE TABLE [dbo].[DIM_LINHAS_SGE] (
    [CD_GRUPO]    SMALLINT  NOT NULL,
    [CD_SUBGRUPO] SMALLINT  NOT NULL,
    [DN_GRUPO]    CHAR (25) NULL,
    [CD_DIVISAO]  CHAR (1)  NULL,
    [DT_SINC]     DATETIME  NULL,
    CONSTRAINT [PK_DIM_LINHAS_SGE] PRIMARY KEY CLUSTERED ([CD_GRUPO] ASC, [CD_SUBGRUPO] ASC)
);


GO
PRINT N'Creating [dbo].[DIM_PRODUTOS]...';


GO
CREATE TABLE [dbo].[DIM_PRODUTOS] (
    [CD_FILIAL]       INT             NOT NULL,
    [CD_ITEM]         CHAR (16)       NOT NULL,
    [DN_ITEM_COM]     CHAR (50)       NULL,
    [DN_ITEM_IND]     CHAR (50)       NULL,
    [CD_CLASSE_ABC]   CHAR (1)        NULL,
    [CD_CLASSIF]      NUMERIC (10)    NULL,
    [CD_GRUPO]        SMALLINT        NULL,
    [CD_SUBGRUPO]     SMALLINT        NULL,
    [CD_LINHA]        CHAR (6)        NULL,
    [VL_CUSTO_INDUST] NUMERIC (12, 4) NULL,
    [TP_OBSOLETO_IND] CHAR (1)        NULL,
    [TP_OBSOLETO_COM] CHAR (1)        NULL,
    [DT_SINC]         DATETIME        NULL,
    CONSTRAINT [PK_DIM_PRODUTOS] PRIMARY KEY CLUSTERED ([CD_ITEM] ASC)
);


GO
PRINT N'Creating [dbo].[DIM_REPRESENTANTE]...';


GO
CREATE TABLE [dbo].[DIM_REPRESENTANTE] (
    [CD_REPRES]   INT       NOT NULL,
    [CD_CGCCPF]   CHAR (18) NULL,
    [DN_FANTASIA] CHAR (20) NOT NULL,
    [TP_SITUACAO] CHAR (1)  NOT NULL,
    [NR_CONTRATO] CHAR (20) NULL,
    [CD_REGIAO]   CHAR (6)  NULL,
    [CD_GERENTE]  INT       NULL,
    [DT_SINC]     DATETIME  NULL,
    CONSTRAINT [PK_DIM_REPRESENTANTE] PRIMARY KEY CLUSTERED ([CD_REPRES] ASC)
);


GO
PRINT N'Creating [dbo].[DIM_TEMPO]...';


GO
CREATE TABLE [dbo].[DIM_TEMPO] (
    [Cod_Dia]            NVARCHAR (50) NOT NULL,
    [Data]               DATE          NULL,
    [Cod_Semana]         INT           NULL,
    [Nome_dia_Semana]    NVARCHAR (50) NULL,
    [Cod_Mes]            INT           NULL,
    [Nome_Mes]           NVARCHAR (50) NULL,
    [Cod_Mes_Ano]        NVARCHAR (50) NULL,
    [Nome_Mes_Ano]       NVARCHAR (50) NULL,
    [Cod_Trimestre]      INT           NULL,
    [Nome_Trimestre]     NVARCHAR (50) NULL,
    [Cod_Trimestre_Ano]  NVARCHAR (50) NULL,
    [Nome_Trimestre_Ano] NVARCHAR (50) NULL,
    [Cod_Semestre]       INT           NULL,
    [Nome_Semestre]      NVARCHAR (50) NULL,
    [Cod_Semestre_Ano]   NVARCHAR (50) NULL,
    [Nome_Semestre_Ano]  NVARCHAR (50) NULL,
    [Ano]                NVARCHAR (50) NULL,
    [Tipo_Dia]           NVARCHAR (50) NULL,
    PRIMARY KEY CLUSTERED ([Cod_Dia] ASC)
);


GO
PRINT N'Creating [dbo].[FATO_001]...';


GO
CREATE TABLE [dbo].[FATO_001] (
    [Cod_Dia]       NVARCHAR (50)   NOT NULL,
    [CD_FILIAL]     SMALLINT        NOT NULL,
    [CD_CLIENTE]    INT             NOT NULL,
    [CD_REPRES]     INT             NOT NULL,
    [CD_REGIAO]     CHAR (6)        NOT NULL,
    [CD_ITEM]       CHAR (16)       NOT NULL,
    [QT_FATURADA]   NUMERIC (12, 4) NULL,
    [VL_FATURADA]   NUMERIC (16, 2) NULL,
    [CD_GRUPO]      SMALLINT        NOT NULL,
    [CD_SUBGRUPO]   SMALLINT        NOT NULL,
    [CD_LINHA]      CHAR (6)        NOT NULL,
    [CD_LINHA_COTA] INT             NOT NULL,
    [CD_DIVISAO]    CHAR (1)        NOT NULL,
    [DT_SINC]       DATETIME        NULL,
    CONSTRAINT [PK_FATO_001] PRIMARY KEY CLUSTERED ([Cod_Dia] ASC, [CD_FILIAL] ASC, [CD_CLIENTE] ASC, [CD_REPRES] ASC, [CD_REGIAO] ASC, [CD_ITEM] ASC, [CD_GRUPO] ASC, [CD_SUBGRUPO] ASC, [CD_LINHA] ASC, [CD_LINHA_COTA] ASC, [CD_DIVISAO] ASC)
);


GO
PRINT N'Creating [dbo].[FATO_002]...';


GO
CREATE TABLE [dbo].[FATO_002] (
    [Cod_Dia]       NVARCHAR (50)   NOT NULL,
    [CD_FILIAL]     SMALLINT        NOT NULL,
    [CD_CLIENTE]    INT             NOT NULL,
    [CD_REPRES]     INT             NOT NULL,
    [CD_REGIAO]     CHAR (6)        NOT NULL,
    [CD_ITEM]       CHAR (16)       NOT NULL,
    [QT_VENDIDA]    NUMERIC (12, 4) NULL,
    [VL_VENDIDO]    NUMERIC (16, 2) NOT NULL,
    [CD_GRUPO]      SMALLINT        NOT NULL,
    [CD_SUBGRUPO]   SMALLINT        NOT NULL,
    [CD_LINHA]      CHAR (6)        NOT NULL,
    [CD_LINHA_COTA] INT             NOT NULL,
    [CD_DIVISAO]    CHAR (1)        NOT NULL,
    [DT_SINC]       DATETIME        NULL,
    CONSTRAINT [PK_FATO_002] PRIMARY KEY CLUSTERED ([Cod_Dia] ASC, [CD_FILIAL] ASC, [CD_CLIENTE] ASC, [CD_REPRES] ASC, [CD_REGIAO] ASC, [VL_VENDIDO] ASC, [CD_GRUPO] ASC, [CD_SUBGRUPO] ASC, [CD_LINHA] ASC, [CD_LINHA_COTA] ASC, [CD_DIVISAO] ASC)
);


GO
PRINT N'Creating [dbo].[FK_DIM_LINHAS_AGRUPADAS_DIM_DIVISOES]...';


GO
ALTER TABLE [dbo].[DIM_LINHAS_AGRUPADAS] WITH NOCHECK
    ADD CONSTRAINT [FK_DIM_LINHAS_AGRUPADAS_DIM_DIVISOES] FOREIGN KEY ([CD_DIVISAO]) REFERENCES [dbo].[DIM_DIVISOES] ([CD_DIVISAO]);


GO
PRINT N'Creating [dbo].[FK_DIM_LINHAS_SGE_DIM_DIVISOES]...';


GO
ALTER TABLE [dbo].[DIM_LINHAS_SGE] WITH NOCHECK
    ADD CONSTRAINT [FK_DIM_LINHAS_SGE_DIM_DIVISOES] FOREIGN KEY ([CD_DIVISAO]) REFERENCES [dbo].[DIM_DIVISOES] ([CD_DIVISAO]);


GO
PRINT N'Creating [dbo].[FK_DIM_PRODUTOS_DIM_LINHAS_SGE]...';


GO
ALTER TABLE [dbo].[DIM_PRODUTOS] WITH NOCHECK
    ADD CONSTRAINT [FK_DIM_PRODUTOS_DIM_LINHAS_SGE] FOREIGN KEY ([CD_GRUPO], [CD_SUBGRUPO]) REFERENCES [dbo].[DIM_LINHAS_SGE] ([CD_GRUPO], [CD_SUBGRUPO]);


GO
PRINT N'Creating [dbo].[FK_FATO_001_DIM_DIVISOES]...';


GO
ALTER TABLE [dbo].[FATO_001] WITH NOCHECK
    ADD CONSTRAINT [FK_FATO_001_DIM_DIVISOES] FOREIGN KEY ([CD_DIVISAO]) REFERENCES [dbo].[DIM_DIVISOES] ([CD_DIVISAO]);


GO
PRINT N'Creating [dbo].[FK_FATO_001_DIM_LINHAS_AGRUPADAS]...';


GO
ALTER TABLE [dbo].[FATO_001] WITH NOCHECK
    ADD CONSTRAINT [FK_FATO_001_DIM_LINHAS_AGRUPADAS] FOREIGN KEY ([CD_LINHA_COTA]) REFERENCES [dbo].[DIM_LINHAS_AGRUPADAS] ([CD_LINHA_COTA]);


GO
PRINT N'Creating [dbo].[FK_FATO_001_DIM_CLIENTE]...';


GO
ALTER TABLE [dbo].[FATO_001] WITH NOCHECK
    ADD CONSTRAINT [FK_FATO_001_DIM_CLIENTE] FOREIGN KEY ([CD_CLIENTE]) REFERENCES [dbo].[DIM_CLIENTE] ([CD_CLIENTE]);


GO
PRINT N'Creating [dbo].[FK_FATO_001_DIM_TEMPO]...';


GO
ALTER TABLE [dbo].[FATO_001] WITH NOCHECK
    ADD CONSTRAINT [FK_FATO_001_DIM_TEMPO] FOREIGN KEY ([Cod_Dia]) REFERENCES [dbo].[DIM_TEMPO] ([Cod_Dia]);


GO
PRINT N'Creating [dbo].[FK_FATO_001_DIM_FILIAL]...';


GO
ALTER TABLE [dbo].[FATO_001] WITH NOCHECK
    ADD CONSTRAINT [FK_FATO_001_DIM_FILIAL] FOREIGN KEY ([CD_FILIAL]) REFERENCES [dbo].[DIM_FILIAL] ([CD_FILIAL]);


GO
PRINT N'Creating [dbo].[FK_FATO_001_DIM_LINHAS_SGE]...';


GO
ALTER TABLE [dbo].[FATO_001] WITH NOCHECK
    ADD CONSTRAINT [FK_FATO_001_DIM_LINHAS_SGE] FOREIGN KEY ([CD_GRUPO], [CD_SUBGRUPO]) REFERENCES [dbo].[DIM_LINHAS_SGE] ([CD_GRUPO], [CD_SUBGRUPO]);


GO
PRINT N'Creating [dbo].[FK_FATO_001_DIM_REPRESENTANTE]...';


GO
ALTER TABLE [dbo].[FATO_001] WITH NOCHECK
    ADD CONSTRAINT [FK_FATO_001_DIM_REPRESENTANTE] FOREIGN KEY ([CD_REPRES]) REFERENCES [dbo].[DIM_REPRESENTANTE] ([CD_REPRES]);


GO
PRINT N'Creating [dbo].[DIM_CLIENTE_MERGE]...';


GO
CREATE PROCEDURE [dbo].[DIM_CLIENTE_MERGE]

AS
	MERGE [Auxiliar].[dbo].[DIM_CLIENTE] AS Destino

USING 

(select A.CD_CLIENTE,
	   A.CD_CGCCPF,
	   A.DN_FANTASIA,
	   B.CD_MUNICIPIO,
	   C.DN_MUNICIPIO,
	   B.DN_BAIRRO,
	   B.CD_CEP,
	   B.NR_ENDERECO,
	   C.CD_UF,
	   D.DN_UF,
	   A.TP_SITUACAO as TP_SITUACAO_SGE,
	   A.VL_LIMITE_CRED,
	   convert(date,B.DT_IMPLANTACAO) as DT_IMPLANTACAO,
	   CURRENT_TIMESTAMP as  DT_SINC
from [FISCAL].[dbo].GE023 A
left join [FISCAL].[dbo].GE010 B on A.CD_CGCCPF = B.CD_CGCCPF
left join [FISCAL].[dbo].GE013 C on B.CD_MUNICIPIO = C.CD_MUNICIPIO
left join [FISCAL].[dbo].GE012 D on C.CD_UF = D.CD_UF and D.CD_PAIS='0001')

AS Origem

--Verificar alteraçãoes no cliente
ON (Destino.CD_CLIENTE = Origem.CD_CLIENTE AND 
    Destino.CD_CGCCPF = Origem.CD_CGCCPF 
	)

--Os campos que devem alterar
WHEN MATCHED THEN
    UPDATE SET Destino.CD_MUNICIPIO = Origem.CD_MUNICIPIO,
			   Destino.DN_MUNICIPIO = Origem.DN_MUNICIPIO,
			   Destino.DN_BAIRRO = Origem.DN_BAIRRO,
			   Destino.CD_CEP = Origem.CD_CEP,
			   Destino.NR_ENDERECO = Origem.NR_ENDERECO,
	           Destino.CD_UF = Origem.CD_UF,
	           Destino.DN_UF = Origem.DN_UF,
	           Destino.TP_SITUACAO_SGE  = Origem.TP_SITUACAO_SGE,
	           Destino.VL_LIMITE_CRED = Origem.VL_LIMITE_CRED,
			   Destino.DT_IMPLANTACAO = Origem.DT_IMPLANTACAO,
	           Destino.DT_SINC  = Origem.DT_SINC

--Se a condição não foi obedecida porque o registro não existe na tabela de destino

WHEN NOT MATCHED BY TARGET THEN

    INSERT (CD_CLIENTE, CD_CGCCPF, DN_FANTASIA, CD_MUNICIPIO, DN_MUNICIPIO, DN_BAIRRO, CD_CEP, NR_ENDERECO, CD_UF, DN_UF, TP_SITUACAO_SGE, VL_LIMITE_CRED, DT_IMPLANTACAO, DT_SINC)

    VALUES (Origem.CD_CLIENTE, Origem.CD_CGCCPF, Origem.DN_FANTASIA, Origem.CD_MUNICIPIO, Origem.DN_MUNICIPIO, Origem.DN_BAIRRO, Origem.CD_CEP, Origem.NR_ENDERECO, Origem.CD_UF, Origem.DN_UF, Origem.TP_SITUACAO_SGE, Origem.VL_LIMITE_CRED, Origem.DT_IMPLANTACAO, Origem.DT_SINC)

OUTPUT $action, Inserted.*, Deleted.*;
RETURN 0
GO
PRINT N'Creating [dbo].[DIM_DIVISOES_MERGE]...';


GO
CREATE PROCEDURE [dbo].[DIM_DIVISOES_MERGE]
	
AS
	
MERGE [dbo].[DIM_DIVISOES] AS Destino

USING 
(select 'X' as CD_DIVISAO,'Exportação' as DN_DIVISAO, CURRENT_TIMESTAMP as DT_SINC
union
select 'I' as CD_DIVISAO,'Iluminação' as DN_DIVISAO, CURRENT_TIMESTAMP as DT_SINC 
union
select 'E' as CD_DIVISAO,'Material Elétrico' as DN_DIVISAO, CURRENT_TIMESTAMP as DT_SINC 
union 
select 'T' as CD_DIVISAO,'Televendas' as DN_DIVISAO, CURRENT_TIMESTAMP as DT_SINC  
union
select 'O' as CD_DIVISAO,'Outros' as DN_DIVISAO, CURRENT_TIMESTAMP as DT_SINC  
union
select 'A' as CD_DIVISAO,'ABB' as DN_DIVISAO, CURRENT_TIMESTAMP as DT_SINC  
union
select 'M' as CD_DIVISAO,'Mercado' as DN_DIVISAO, CURRENT_TIMESTAMP as DT_SINC 
union 
select 'C' as CD_DIVISAO,'Construção Civil' as DN_DIVISAO, CURRENT_TIMESTAMP as DT_SINC)

AS Origem
--Condição: O produto existe nas 2 tabelas e o cliente também
 ON (Destino.CD_DIVISAO = Origem.CD_DIVISAO)

--Se a condição for obedecida, ou seja, existem registros nas duas tabelas
WHEN MATCHED THEN
    UPDATE SET Destino.CD_DIVISAO = Origem.CD_DIVISAO,
			   Destino.DN_DIVISAO = Origem.DN_DIVISAO,
			   Destino.DT_SINC = Origem.DT_SINC

--Se a condição não foi obedecida porque o registro não existe na tabela de destino
WHEN NOT MATCHED BY TARGET THEN
    INSERT (CD_DIVISAO, DN_DIVISAO, DT_SINC)
    VALUES (Origem.CD_DIVISAO, Origem.DN_DIVISAO,Origem.DT_SINC)

OUTPUT $action, Inserted.*, Deleted.*;
										

RETURN 0
GO
PRINT N'Creating [dbo].[DIM_FILIAL_MERGE]...';


GO
CREATE PROCEDURE [dbo].[DIM_FILIAL_MERGE]
	
AS
MERGE [Auxiliar].[dbo].[DIM_FILIAL] AS Destino

USING (select CD_FILIAL, DN_FANTASIA,DN_RAZAO,CD_CGCCPF,CURRENT_TIMESTAMP as DT_SINC from [Fiscal].[dbo].[GE018]) AS Origem
ON (Destino.CD_FILIAL = Origem.CD_FILIAL AND Destino.DN_FANTASIA = Origem.DN_FANTASIA and Destino.DN_RAZAO = Origem.DN_RAZAO and Destino.CD_CGCCPF = Origem.CD_CGCCPF)

WHEN MATCHED THEN
    UPDATE SET Destino.DN_FANTASIA = Origem.DN_FANTASIA, Destino.DT_SINC=Origem.DT_SINC

WHEN NOT MATCHED BY TARGET THEN

    INSERT (CD_FILIAL, DN_FANTASIA, DN_RAZAO, CD_CGCCPF,DT_SINC)
    VALUES (Origem.CD_FILIAL, Origem.DN_FANTASIA, Origem.DN_RAZAO, Origem.CD_CGCCPF, Origem.DT_SINC)

OUTPUT $action, Inserted.*, Deleted.*;

RETURN 0
GO
PRINT N'Creating [dbo].[DIM_LINHAS_AGRUPADAS_MERGE]...';


GO
CREATE PROCEDURE [dbo].[DIM_LINHAS_AGRUPADAS_MERGE]

AS
	MERGE Auxiliar.dbo.DIM_LINHAS_AGRUPADAS AS Destino

USING (
select '0' as CD_LINHA_COTA, 'SEM CLASSIFICAÇÃO' as DN_LINHA_COTA, 'O' as CD_DIVISAO, CURRENT_TIMESTAMP as DT_SINC
union
select A.ID as CD_LINHA_COTA, A.NomeCota as DN_LINHA_COTA ,A.DIVISAO as CD_DIVISAO, CURRENT_TIMESTAMP as DT_SINC
from   INTRANET.dbo.COTA004 A
where GestaoProdutos='SIM'
) AS Origem

--Condição: O produto existe nas 2 tabelas e o cliente também
ON (Destino.CD_LINHA_COTA = Origem.CD_LINHA_COTA)

--Se a condição for obedecida, ou seja, existem registros nas duas tabelas
WHEN MATCHED THEN

    UPDATE SET Destino.DN_LINHA_COTA = Origem.DN_LINHA_COTA,
			   Destino.CD_DIVISAO = Origem.CD_DIVISAO,
			   Destino.DT_SINC = Origem.DT_SINC

--Se a condição não foi obedecida porque o registro não existe na tabela de destino

WHEN NOT MATCHED BY TARGET THEN

    INSERT (CD_LINHA_COTA,DN_LINHA_COTA,CD_DIVISAO,DT_SINC)

    VALUES (Origem.CD_LINHA_COTA,Origem.DN_LINHA_COTA,Origem.CD_DIVISAO,Origem.DT_SINC)

OUTPUT $action, Inserted.*, Deleted.*;





RETURN 0
GO
PRINT N'Creating [dbo].[DIM_LINHAS_SGE_MERGE]...';


GO
CREATE PROCEDURE [dbo].[DIM_LINHAS_SGE_MERGE]

AS
	MERGE [Auxiliar].[dbo].[DIM_LINHAS_SGE] AS Destino

USING 

(
select '6' as CD_GRUPO,	'0' as CD_SUBGRUPO, 'NAO CLASSIFICADO' as DN_GRUPO, 'O' as CD_DIVISAO, CURRENT_TIMESTAMP as DT_SINC union
select '6' as CD_GRUPO,	'1' as CD_SUBGRUPO, 'TRADICIONAL' as DN_GRUPO, 'E' as CD_DIVISAO, CURRENT_TIMESTAMP as DT_SINC union
select '6' as CD_GRUPO,	'10' as CD_SUBGRUPO, 'SIENA FACIL' as DN_GRUPO, 'E' as CD_DIVISAO, CURRENT_TIMESTAMP as DT_SINC union
select '6' as CD_GRUPO,	'11' as CD_SUBGRUPO, 'RAVELO' as DN_GRUPO, 'E' as CD_DIVISAO, CURRENT_TIMESTAMP as DT_SINC union
select '6' as CD_GRUPO,	'12' as CD_SUBGRUPO, 'ELETRONICOS' as DN_GRUPO, 'E' as CD_DIVISAO, CURRENT_TIMESTAMP as DT_SINC union
select '6' as CD_GRUPO,	'13' as CD_SUBGRUPO, 'SIENA COOPER' as DN_GRUPO, 'X' as CD_DIVISAO, CURRENT_TIMESTAMP as DT_SINC union
select '6' as CD_GRUPO,	'14' as CD_SUBGRUPO, 'SIENA FACIL COOPER' as DN_GRUPO, 'X' as CD_DIVISAO, CURRENT_TIMESTAMP as DT_SINC union
select '6' as CD_GRUPO,	'15' as CD_SUBGRUPO, 'SIENA COLORS COOPER' as DN_GRUPO, 'X' as CD_DIVISAO, CURRENT_TIMESTAMP as DT_SINC union
select '6' as CD_GRUPO,	'16' as CD_SUBGRUPO, 'SEDNA COOPER' as DN_GRUPO, 'X' as CD_DIVISAO, CURRENT_TIMESTAMP as DT_SINC union
select '6' as CD_GRUPO,	'17' as CD_SUBGRUPO, 'ALLEGRA' as DN_GRUPO, 'E' as CD_DIVISAO, CURRENT_TIMESTAMP as DT_SINC union
select '6' as CD_GRUPO,	'18' as CD_SUBGRUPO, 'XPOLE' as DN_GRUPO, 'E' as CD_DIVISAO, CURRENT_TIMESTAMP as DT_SINC union
select '6' as CD_GRUPO,	'19' as CD_SUBGRUPO, 'SMART-TEC' as DN_GRUPO, 'E' as CD_DIVISAO, CURRENT_TIMESTAMP as DT_SINC union
select '6' as CD_GRUPO,	'2'  as CD_SUBGRUPO, 'BARI' as DN_GRUPO, 'E' as CD_DIVISAO, CURRENT_TIMESTAMP as DT_SINC union
select '6' as CD_GRUPO,	'20' as CD_SUBGRUPO, 'SMART-FLEX' as DN_GRUPO, 'E' as CD_DIVISAO, CURRENT_TIMESTAMP as DT_SINC union
select '6' as CD_GRUPO,	'21' as CD_SUBGRUPO, 'ELETRÔNICOS TRADICIONAL' as DN_GRUPO, 'E' as CD_DIVISAO, CURRENT_TIMESTAMP as DT_SINC union
select '6' as CD_GRUPO,	'22' as CD_SUBGRUPO, 'ELETRÔNICOS BARI' as DN_GRUPO, 'E' as CD_DIVISAO, CURRENT_TIMESTAMP as DT_SINC union
select '6' as CD_GRUPO,	'23' as CD_SUBGRUPO, 'ELETRÔNICOS SIENA FÁCIL' as DN_GRUPO, 'E' as CD_DIVISAO, CURRENT_TIMESTAMP as DT_SINC union
select '6' as CD_GRUPO,	'24' as CD_SUBGRUPO, 'ELETRÔNICOS SIENA' as DN_GRUPO, 'E' as CD_DIVISAO, CURRENT_TIMESTAMP as DT_SINC union
select '6' as CD_GRUPO,	'25' as CD_SUBGRUPO, 'ELETRÔNICOS BELLISE' as DN_GRUPO, 'E' as CD_DIVISAO, CURRENT_TIMESTAMP as DT_SINC union
select '6' as CD_GRUPO,	'26' as CD_SUBGRUPO, 'ELETRÔNICOS RAVELO' as DN_GRUPO, 'E' as CD_DIVISAO, CURRENT_TIMESTAMP as DT_SINC union
select '6' as CD_GRUPO,	'27' as CD_SUBGRUPO, 'ELETRÔNICOS ALLEGRA' as DN_GRUPO, 'E' as CD_DIVISAO, CURRENT_TIMESTAMP as DT_SINC union
select '6' as CD_GRUPO,	'28' as CD_SUBGRUPO, 'TRADICIONAL BRANCA' as DN_GRUPO, 'E' as CD_DIVISAO, CURRENT_TIMESTAMP as DT_SINC union
select '6' as CD_GRUPO,	'29' as CD_SUBGRUPO, 'BLISS' as DN_GRUPO, 'E' as CD_DIVISAO, CURRENT_TIMESTAMP as DT_SINC union
select '6' as CD_GRUPO,	'3'  as CD_SUBGRUPO, 'LINHA A' as DN_GRUPO, 'E' as CD_DIVISAO, CURRENT_TIMESTAMP as DT_SINC union
select '6' as CD_GRUPO,	'30' as CD_SUBGRUPO, 'ELETRONICOS BLISS' as DN_GRUPO, 'E' as CD_DIVISAO, CURRENT_TIMESTAMP as DT_SINC union
select '6' as CD_GRUPO,	'31' as CD_SUBGRUPO, 'TRADICIONAL PLUGUES' as DN_GRUPO, 'E' as CD_DIVISAO, CURRENT_TIMESTAMP as DT_SINC union
select '6' as CD_GRUPO,	'32' as CD_SUBGRUPO, 'ILUMINAÇÃO FLUORESC.COMPA' as DN_GRUPO, 'I' as CD_DIVISAO, CURRENT_TIMESTAMP as DT_SINC union
select '6' as CD_GRUPO,	'34' as CD_SUBGRUPO, 'ILUMINAÇÃO MINI FLUOR PL' as DN_GRUPO, 'I' as CD_DIVISAO, CURRENT_TIMESTAMP as DT_SINC union
select '6' as CD_GRUPO,	'35' as CD_SUBGRUPO, 'ILUMINAÇÃO VAPOR METÁLICO' as DN_GRUPO, 'I' as CD_DIVISAO, CURRENT_TIMESTAMP as DT_SINC union
select '6' as CD_GRUPO,	'36' as CD_SUBGRUPO, 'ILUMINAÇÃO VAPOR DE SÓDIO' as DN_GRUPO, 'I' as CD_DIVISAO, CURRENT_TIMESTAMP as DT_SINC union
select '6' as CD_GRUPO,	'37' as CD_SUBGRUPO, 'ILUMINAÇÃO LUZ MISTA' as DN_GRUPO, 'I' as CD_DIVISAO, CURRENT_TIMESTAMP as DT_SINC union
select '6' as CD_GRUPO,	'38' as CD_SUBGRUPO, 'ILUMINAÇÃO TUBULAR' as DN_GRUPO, 'I' as CD_DIVISAO, CURRENT_TIMESTAMP as DT_SINC union
select '6' as CD_GRUPO,	'39' as CD_SUBGRUPO, 'ILUMINAÇÃO HALÓGENAS' as DN_GRUPO, 'I' as CD_DIVISAO, CURRENT_TIMESTAMP as DT_SINC union
select '6' as CD_GRUPO,	'4'  as CD_SUBGRUPO, 'BELLISE' as DN_GRUPO, 'E' as CD_DIVISAO, CURRENT_TIMESTAMP as DT_SINC union
select '6' as CD_GRUPO,	'40' as CD_SUBGRUPO, 'INOVA' as DN_GRUPO, 'E' as CD_DIVISAO, CURRENT_TIMESTAMP as DT_SINC union
select '6' as CD_GRUPO,	'41' as CD_SUBGRUPO, 'INOVA ELETRONICOS' as DN_GRUPO, 'E' as CD_DIVISAO, CURRENT_TIMESTAMP as DT_SINC union
select '6' as CD_GRUPO,	'42' as CD_SUBGRUPO, 'ILUMINAÇÃO LUMINÁRIA' as DN_GRUPO, 'I' as CD_DIVISAO, CURRENT_TIMESTAMP as DT_SINC union
select '6' as CD_GRUPO,	'43' as CD_SUBGRUPO, 'ILUMINAÇÃO LED' as DN_GRUPO, 'I' as CD_DIVISAO, CURRENT_TIMESTAMP as DT_SINC union
select '6' as CD_GRUPO,	'44' as CD_SUBGRUPO, 'REATORES' as DN_GRUPO, 'I' as CD_DIVISAO, CURRENT_TIMESTAMP as DT_SINC union
select '6' as CD_GRUPO,	'45' as CD_SUBGRUPO, 'INOVAPRÓ' as DN_GRUPO, 'E' as CD_DIVISAO, CURRENT_TIMESTAMP as DT_SINC union
select '6' as CD_GRUPO,	'46' as CD_SUBGRUPO, 'ELETRÔNICOS INOVAPRÓ' as DN_GRUPO, 'E' as CD_DIVISAO, CURRENT_TIMESTAMP as DT_SINC union
select '6' as CD_GRUPO,	'47' as CD_SUBGRUPO, 'VDI' as DN_GRUPO, 'E' as CD_DIVISAO, CURRENT_TIMESTAMP as DT_SINC union
select '6' as CD_GRUPO,	'48' as CD_SUBGRUPO, 'SMART CONTROL' as DN_GRUPO, 'I' as CD_DIVISAO, CURRENT_TIMESTAMP as DT_SINC union
select '6' as CD_GRUPO,	'49' as CD_SUBGRUPO, 'HALUX SODIMAC' as DN_GRUPO, 'E' as CD_DIVISAO, CURRENT_TIMESTAMP as DT_SINC union
select '6' as CD_GRUPO,	'5'	 as CD_SUBGRUPO, 'DECOLUX' as DN_GRUPO, 'E' as CD_DIVISAO, CURRENT_TIMESTAMP as DT_SINC union
select '6' as CD_GRUPO,	'50' as CD_SUBGRUPO, 'ILUMINAÇÃO QUALIDADE' as DN_GRUPO, 'I' as CD_DIVISAO, CURRENT_TIMESTAMP as DT_SINC union
select '6' as CD_GRUPO,	'51' as CD_SUBGRUPO, 'ELETRONICOS HALUX SODIMAC' as DN_GRUPO, 'E' as CD_DIVISAO, CURRENT_TIMESTAMP as DT_SINC union
select '6' as CD_GRUPO,	'52' as CD_SUBGRUPO, 'BIANCOPRO' as DN_GRUPO, 'E' as CD_DIVISAO, CURRENT_TIMESTAMP as DT_SINC union
select '6' as CD_GRUPO,	'53' as CD_SUBGRUPO, 'ELETRÔNICOS BIANCOPRO' as DN_GRUPO, 'E' as CD_DIVISAO, CURRENT_TIMESTAMP as DT_SINC union
select '6' as CD_GRUPO,	'54' as CD_SUBGRUPO, 'LINHA PARA MÓVEIS' as DN_GRUPO, 'E' as CD_DIVISAO, CURRENT_TIMESTAMP as DT_SINC union
select '6' as CD_GRUPO,	'55' as CD_SUBGRUPO, 'LINHA GRACIA' as DN_GRUPO, 'E' as CD_DIVISAO, CURRENT_TIMESTAMP as DT_SINC union
select '6' as CD_GRUPO,	'56' as CD_SUBGRUPO, 'MÓDULOPRO' as DN_GRUPO, 'E' as CD_DIVISAO, CURRENT_TIMESTAMP as DT_SINC union
select '6' as CD_GRUPO,	'57' as CD_SUBGRUPO, 'LINHA GRACIA ELETRÔNICOS' as DN_GRUPO, 'E' as CD_DIVISAO, CURRENT_TIMESTAMP as DT_SINC union
select '6' as CD_GRUPO,	'58' as CD_SUBGRUPO, 'PRODUTOS PARAGUAI' as DN_GRUPO, 'X' as CD_DIVISAO, CURRENT_TIMESTAMP as DT_SINC union
select '6' as CD_GRUPO,	'59' as CD_SUBGRUPO, 'ILUMINAÇÃO LUMINÁRIA LED' as DN_GRUPO, 'I' as CD_DIVISAO, CURRENT_TIMESTAMP as DT_SINC union
select '6' as CD_GRUPO,	'6'  as CD_SUBGRUPO, 'TRADICIONAL SOBREPOR' as DN_GRUPO, 'E' as CD_DIVISAO, CURRENT_TIMESTAMP as DT_SINC union
select '6' as CD_GRUPO,	'60' as CD_SUBGRUPO, 'ABB UNNO' as DN_GRUPO, 'A' as CD_DIVISAO, CURRENT_TIMESTAMP as DT_SINC union
select '6' as CD_GRUPO,	'61' as CD_SUBGRUPO, 'INOVA PRO CLASS' as DN_GRUPO, 'E' as CD_DIVISAO, CURRENT_TIMESTAMP as DT_SINC union
select '6' as CD_GRUPO,	'63' as CD_SUBGRUPO, 'BLISS PRÓ' as DN_GRUPO, 'E' as CD_DIVISAO, CURRENT_TIMESTAMP as DT_SINC union
select '6' as CD_GRUPO,	'64' as CD_SUBGRUPO, 'BLISS PRÓ ELETRÔNICOS' as DN_GRUPO, 'E' as CD_DIVISAO, CURRENT_TIMESTAMP as DT_SINC union
select '6' as CD_GRUPO,	'66' as CD_SUBGRUPO, 'GRACIA MAXX' as DN_GRUPO, 'E' as CD_DIVISAO, CURRENT_TIMESTAMP as DT_SINC union
select '6' as CD_GRUPO,	'67' as CD_SUBGRUPO, 'ELETRÔNICOS GRACIA MAXX' as DN_GRUPO, 'E' as CD_DIVISAO, CURRENT_TIMESTAMP as DT_SINC union
select '6' as CD_GRUPO,	'7'  as CD_SUBGRUPO, 'PRODUTOS ENCARTELADOS' as DN_GRUPO, 'E' as CD_DIVISAO, CURRENT_TIMESTAMP as DT_SINC union
select '6' as CD_GRUPO,	'8'  as CD_SUBGRUPO, 'SIENA' as DN_GRUPO, 'E' as CD_DIVISAO, CURRENT_TIMESTAMP as DT_SINC union
select '6' as CD_GRUPO,	'9'  as CD_SUBGRUPO, 'ALUMBRA INFOLINE' as DN_GRUPO, 'E' as CD_DIVISAO, CURRENT_TIMESTAMP as DT_SINC )
AS Origem

--Condição: O produto existe nas 2 tabelas e o cliente também

ON (Destino.CD_GRUPO = Origem.CD_GRUPO AND Destino.CD_SUBGRUPO = Origem.CD_SUBGRUPO)

--Se a condição for obedecida, ou seja, existem registros nas duas tabelas

WHEN MATCHED THEN

    UPDATE SET Destino.DN_GRUPO = Origem.DN_GRUPO,
			   Destino.CD_DIVISAO = Origem.CD_DIVISAO,
			   Destino.DT_SINC = Origem.DT_SINC

--Se a condição não foi obedecida porque o registro não existe na tabela de destino

WHEN NOT MATCHED BY TARGET THEN

    INSERT (CD_GRUPO,CD_SUBGRUPO,DN_GRUPO,CD_DIVISAO,DT_SINC)

    VALUES (Origem.CD_GRUPO, Origem.CD_SUBGRUPO,Origem.DN_GRUPO,Origem.CD_DIVISAO,Origem.DT_SINC)

OUTPUT $action, Inserted.*, Deleted.*;

RETURN 0
GO
PRINT N'Creating [dbo].[DIM_PRODUTOS_MERGE]...';


GO
CREATE PROCEDURE [dbo].[DIM_PRODUTOS_MERGE]
 
AS
	MERGE [Auxiliar].[dbo].DIM_PRODUTOS AS Destino

USING (

select isnull(CD_FILIAL,1) as CD_FILIAL,
       A.CD_ITEM,
	   DN_ITEM_COM,
	   A.DN_ITEM_IND, 
	   B.CD_CLASSE_ABC, 
	   A.CD_CLASSIF,
	   A.CD_GRUPO,
	   A.CD_SUBGRUPO,
	   C.CD_LINHA,
	   C.VL_CUSTO_INDUST,
	   B.TP_OBSOLETO as TP_OBSOLETO_IND, 
	   C.TP_OBSOLETO as TP_OBSOLETO_COM,
	   CURRENT_TIMESTAMP as DT_SINC

from [FISCAL].[dbo].GE003 A
join [FISCAL].[dbo].CC105 C on A.CD_ITEM = C.CD_ITEM and A.CD_GRUPO = C.CD_GRUPO and A.CD_SUBGRUPO = C.CD_SUBGRUPO
left join [FISCAL].[dbo].CI107 B on A.CD_ITEM = B.CD_ITEM and A.CD_GRUPO = B.CD_GRUPO and A.CD_SUBGRUPO = B.CD_SUBGRUPO
where A.CD_GRUPO = 6 and  LTRIM(RTRIM(A.CD_SUBGRUPO))  in (select LTRIM(RTRIM(CD_SUBGRUPO)) from DIM_LINHAS_SGE)
 


) AS Origem

--Condição: O produto existe nas 2 tabelas e o cliente também
ON (Destino.CD_FILIAL = Origem.CD_FILIAL and
    Destino.CD_ITEM = Origem.CD_ITEM	)

--Se a condição for obedecida, ou seja, existem registros nas duas tabelas
WHEN MATCHED THEN

    UPDATE SET Destino.DN_ITEM_COM = Origem.DN_ITEM_COM,
	           Destino.DN_ITEM_IND = Origem.DN_ITEM_IND,
	           Destino.CD_CLASSE_ABC = Origem.CD_CLASSE_ABC,
			   Destino.CD_CLASSIF = Origem.CD_CLASSIF,
			   Destino.CD_GRUPO = Origem.CD_GRUPO,
			   Destino.CD_SUBGRUPO = Origem.CD_SUBGRUPO,
			   Destino.CD_LINHA = Origem.CD_LINHA,
			   Destino.VL_CUSTO_INDUST = Origem.VL_CUSTO_INDUST,
			   Destino.TP_OBSOLETO_IND = Origem.TP_OBSOLETO_IND,
	           Destino.TP_OBSOLETO_COM = Origem.TP_OBSOLETO_COM,
	           Destino.DT_SINC = Origem.DT_SINC

--Se a condição não foi obedecida porque o registro não existe na tabela de destino

WHEN NOT MATCHED BY TARGET THEN

    INSERT (CD_FILIAL,
            CD_ITEM,
	        DN_ITEM_COM,
	        DN_ITEM_IND, 
	        CD_CLASSE_ABC, 
	        CD_CLASSIF,
	        CD_GRUPO,
	        CD_SUBGRUPO,
	        CD_LINHA,
	        VL_CUSTO_INDUST,
	        TP_OBSOLETO_IND, 
	        TP_OBSOLETO_COM,
	        DT_SINC
			)

    VALUES (Origem.CD_FILIAL,
            Origem.CD_ITEM,
	        Origem.DN_ITEM_COM,
	        Origem.DN_ITEM_IND, 
	        Origem.CD_CLASSE_ABC, 
	        Origem.CD_CLASSIF,
	        Origem.CD_GRUPO,
	        Origem.CD_SUBGRUPO,
	        Origem.CD_LINHA,
	        Origem.VL_CUSTO_INDUST,
	        Origem.TP_OBSOLETO_IND, 
	        Origem.TP_OBSOLETO_COM,
	        Origem.DT_SINC)

OUTPUT $action, Inserted.*, Deleted.*;





RETURN 0
GO
PRINT N'Creating [dbo].[DIM_REPRESENTANTE_MERGE]...';


GO
CREATE PROCEDURE [dbo].[DIM_REPRESENTANTE_MERGE]
 
AS
 

MERGE [Auxiliar].[dbo].DIM_REPRESENTANTE AS Destino

USING (

select distinct(cd_repres) as CD_REPRES, 
       CD_CGCCPF,
	   DN_FANTASIA,
	   TP_SITUACAO,
	   NR_CONTRATO,
	   CD_REGIAO,
	   CD_GERENTE,
	   CURRENT_TIMESTAMP as DT_SINC
from [FISCAL].[dbo].ge060
where CD_FILIAL not in (3,4,5,6)
 
 


) AS Origem

--Condição: O produto existe nas 2 tabelas e o cliente também

ON (Destino.CD_REPRES = Origem.CD_REPRES)

--Se a condição for obedecida, ou seja, existem registros nas duas tabelas

WHEN MATCHED THEN

    UPDATE SET Destino.CD_CGCCPF = Origem.CD_CGCCPF,
		    	Destino.DN_FANTASIA = Origem.DN_FANTASIA,
				Destino.TP_SITUACAO	= Origem.TP_SITUACAO,
				Destino.NR_CONTRATO	= Origem.NR_CONTRATO,
				Destino.CD_REGIAO = Origem.CD_REGIAO,
				Destino.CD_GERENTE = Origem.CD_GERENTE,
				Destino.DT_SINC = Origem.DT_SINC

--Se a condição não foi obedecida porque o registro não existe na tabela de destino

WHEN NOT MATCHED BY TARGET THEN

    INSERT (CD_REPRES, 
			CD_CGCCPF,
			DN_FANTASIA,
			TP_SITUACAO,
			NR_CONTRATO,
			CD_REGIAO,
			CD_GERENTE,
			DT_SINC )

    VALUES (Origem.CD_REPRES, 
			Origem.CD_CGCCPF,
			Origem.DN_FANTASIA,
			Origem.TP_SITUACAO,
			Origem.NR_CONTRATO,
			Origem.CD_REGIAO,
			Origem.CD_GERENTE,
			Origem.DT_SINC )

OUTPUT $action, Inserted.*, Deleted.*;
 

RETURN 0
GO
PRINT N'Creating [dbo].[DIM_TEMPO_MERGE]...';


GO
CREATE PROCEDURE [dbo].[DIM_TEMPO_MERGE]

AS
	
/********************************************************************************************/
--Specify Start Date and End date here
--Value of Start Date Must be Less than Your End Date 

DECLARE @DIMDATE TABLE
	(	[Cod_Dia] NVARCHAR(50) primary key, 
		[Data] DATE,
		[Cod_Semana] int,-- 01,02,03 .... 42,43,44
		[Nome_Dia_Semana] NVARCHAR(50),-- Segunda, terça, quarta, quinta, sexta
		[Cod_Mes] int,-- 01,02,03 ... , 11, 12
		[Nome_Mes] NVARCHAR(50),-- Janeiro, Fevereiro, Março, ... Novembro, Dezembro
		[Cod_Mes_Ano] NVARCHAR(50),-- 2017-01, 2017-02, ..., 2017-11, 2017-12
		[Nome_Mes_Ano] NVARCHAR(50),-- Janeiro 2017, Fevereiro 2017, ....
		[Cod_Trimestre] int,-- 01, 02, 03, 04
		[Nome_Trimestre] NVARCHAR(50),-- Primeiro Trimestre, Segundo Trimestre, ...
		[Cod_Trimestre_Ano] NVARCHAR(50),-- 2017-01, 2017-02, ...
		[Nome_Trimestre_Ano] NVARCHAR(50),-- Primeiro Trimestre 2017, Segundo Trimestre 2017, ...
		[Cod_Semestre] int,-- 01, 02, ...
		[Nome_Semestre] NVARCHAR(50),-- Primeiro Semestre, Segundo Semestre, ...
		[Cod_Semestre_Ano] NVARCHAR(50),-- 2017-01, 2017-02, ...
		[Nome_Semestre_Ano] NVARCHAR(50),-- Primeiro Semestre, Segundo Semestre, ...
		[Ano] NVARCHAR(50),-- 2017, ...
		[Tipo_Dia] NVARCHAR(50) -- Dia Útil ou Fim de Semana
	)

DECLARE @AnoInicial VARCHAR(4) = '2006'
DECLARE @MesInicial VARCHAR(2) = '1'
DECLARE @AnoFinal VARCHAR(4) = convert(varchar(4),YEAR(CURRENT_TIMESTAMP))
DECLARE @MesFinal VARCHAR(2) = convert(varchar(2),MONTH(CURRENT_TIMESTAMP))

DECLARE @StartDate DATETIME
Select @StartDate = CAST(@AnoInicial + '/' + @MesInicial + '/01' AS DATETIME)

DECLARE @EndDate DATETIME 
SELECT @EndDate = DATEADD(month, ((CAST(@AnoFinal AS INTEGER) - 1900) * 12) + CAST(@MesFinal AS INTEGER), 0)

--Temporary Variables To Hold the Values During Processing of Each Date of Year
DECLARE
	@DayOfWeekInMonth INT,
	@DayOfWeekInYear INT,
	@DayOfQuarter INT,
	@WeekOfMonth INT,
	@CurrentYear INT,
	@CurrentMonth INT,
	@CurrentQuarter INT

/*Table Data type to store the day of week count for the month and year*/
DECLARE @DayOfWeek TABLE (DOW INT, MonthCount INT, QuarterCount INT, YearCount INT)

INSERT INTO @DayOfWeek VALUES (1, 0, 0, 0)
INSERT INTO @DayOfWeek VALUES (2, 0, 0, 0)
INSERT INTO @DayOfWeek VALUES (3, 0, 0, 0)
INSERT INTO @DayOfWeek VALUES (4, 0, 0, 0)
INSERT INTO @DayOfWeek VALUES (5, 0, 0, 0)
INSERT INTO @DayOfWeek VALUES (6, 0, 0, 0)
INSERT INTO @DayOfWeek VALUES (7, 0, 0, 0)

--Extract and assign various parts of Values from Current Date to Variable

DECLARE @CurrentDate AS DATETIME = @StartDate
SET @CurrentMonth = DATEPART(MM, @CurrentDate)
SET @CurrentYear = DATEPART(YY, @CurrentDate)
SET @CurrentQuarter = DATEPART(QQ, @CurrentDate)

/********************************************************************************************/
--Proceed only if Start Date(Current date ) is less than End date you specified above

WHILE @CurrentDate < @EndDate
BEGIN
 
/*Begin day of week logic*/

         /*Check for Change in Month of the Current date if Month changed then 
          Change variable value*/
	IF @CurrentMonth != DATEPART(MM, @CurrentDate) 
	BEGIN
		UPDATE @DayOfWeek
		SET MonthCount = 0
		SET @CurrentMonth = DATEPART(MM, @CurrentDate)
	END

        /* Check for Change in Quarter of the Current date if Quarter changed then change 
         Variable value*/

	IF @CurrentQuarter != DATEPART(QQ, @CurrentDate)
	BEGIN
		UPDATE @DayOfWeek
		SET QuarterCount = 0
		SET @CurrentQuarter = DATEPART(QQ, @CurrentDate)
	END
       
        /* Check for Change in Year of the Current date if Year changed then change 
         Variable value*/
	

	IF @CurrentYear != DATEPART(YY, @CurrentDate)
	BEGIN
		UPDATE @DayOfWeek
		SET YearCount = 0
		SET @CurrentYear = DATEPART(YY, @CurrentDate)
	END
	
        -- Set values in table data type created above from variables 

	UPDATE @DayOfWeek
	SET 
		MonthCount = MonthCount + 1,
		QuarterCount = QuarterCount + 1,
		YearCount = YearCount + 1
	WHERE DOW = DATEPART(DW, @CurrentDate)

	SELECT
		@DayOfWeekInMonth = MonthCount,
		@DayOfQuarter = QuarterCount,
		@DayOfWeekInYear = YearCount
	FROM @DayOfWeek
	WHERE DOW = DATEPART(DW, @CurrentDate)
	
/*End day of week logic*/


/* Populate Your Dimension Table with values*/
	
	INSERT INTO @DIMDATE
	SELECT	
		CONVERT (NVARCHAR(8),@CurrentDate,112) as Cod_Dia,
		@CurrentDate as Data,
		RIGHT ('00'+LTRIM(STR(CONVERT(NVARCHAR(2), @DayOfWeekInYear))),2 ) as Cod_Semana,
		CASE DATEPART(DW, @CurrentDate)
			WHEN 1 THEN 'Domingo'
			WHEN 2 THEN 'Segunda'
			WHEN 3 THEN 'Terça'
			WHEN 4 THEN 'Quarta'
			WHEN 5 THEN 'Quinta'
			WHEN 6 THEN 'Sexta'
			WHEN 7 THEN 'Sábado'
			END 
			AS D_Nome_Dia_Semana,
        RIGHT ('00'+LTRIM(STR(CONVERT(NVARCHAR(2), DATEPART(MM, @CurrentDate)))),2 )  as Cod_Mes,
		CASE DATEPART(MM, @CurrentDate)
			WHEN 1 THEN 'Janeiro'
			WHEN 2 THEN 'Fevereiro'
			WHEN 3 THEN 'Março'
			WHEN 4 THEN 'Abril'
			WHEN 5 THEN 'Maio'
			WHEN 6 THEN 'Junho'
			WHEN 7 THEN 'Julho'
			WHEN 8 THEN 'Agosto'
			WHEN 9 THEN 'Setembro'
			WHEN 10 THEN 'Outubro'
			WHEN 11 THEN 'Novembro'
			WHEN 12 THEN 'Dezembro'
			END 
			AS D_Nome_Mes,
			RIGHT ('00'+LTRIM(STR(CONVERT(NVARCHAR(2), DATEPART(MM, @CurrentDate)))),2 ) + '-' + CONVERT(NVARCHAR(4), DATEPART(YEAR, @CurrentDate)) as Cod_Mes_Ano,
			CASE DATEPART(MM, @CurrentDate)
			WHEN 1 THEN 'Janeiro'
			WHEN 2 THEN 'Fevereiro'
			WHEN 3 THEN 'Março'
			WHEN 4 THEN 'Abril'
			WHEN 5 THEN 'Maio'
			WHEN 6 THEN 'Junho'
			WHEN 7 THEN 'Julho'
			WHEN 8 THEN 'Agosto'
			WHEN 9 THEN 'Setembro'
			WHEN 10 THEN 'Outubro'
			WHEN 11 THEN 'Novembro'
			WHEN 12 THEN 'Dezembro'
			END + ' ' + CONVERT(NVARCHAR(4), DATEPART(YEAR, @CurrentDate)) as D_Nome_Mes_Ano,
			RIGHT ('00'+LTRIM(STR(CONVERT(NVARCHAR(2), DATEPART(QQ, @CurrentDate)))),2 ) AS Cod_Trimestre,
			CASE DATEPART(QQ, @CurrentDate)
			WHEN 1 THEN 'Primeiro Trimestre'
			WHEN 2 THEN 'Segundo Trimestre'
			WHEN 3 THEN 'Terceiro Trimestre'
			WHEN 4 THEN 'Quarto Trimestre'
			END AS D_Nome_Trimestre,
			RIGHT ('00'+LTRIM(STR(CONVERT(NVARCHAR(2), DATEPART(QQ, @CurrentDate)))),2 ) + '-' + 
			CONVERT(NVARCHAR(4), DATEPART(YEAR, @CurrentDate)) as Cod_Trimestre_Ano,
			CASE DATEPART(QQ, @CurrentDate)
			WHEN 1 THEN 'Primeiro Trimestre'
			WHEN 2 THEN 'Segundo Trimestre'
			WHEN 3 THEN 'Terceiro Trimestre'
			WHEN 4 THEN 'Quarto Trimestre'
			END + ' ' + CONVERT(NVARCHAR(4), DATEPART(YEAR, @CurrentDate)) AS D_Nome_Trimestre_Ano,
			CASE DATEPART(QQ, @CurrentDate)
			WHEN 1 THEN '01'
			WHEN 2 THEN '01'
			WHEN 3 THEN '02'
			WHEN 4 THEN '02'
			END 
			AS Cod_Semestre,
			CASE DATEPART(QQ, @CurrentDate)
			WHEN 1 THEN 'Primeiro Semestre'
			WHEN 2 THEN 'Primeiro Semestre'
			WHEN 3 THEN 'Segundo Semestre'
			WHEN 4 THEN 'Segundo Semestre'
			END 
			AS D_Nome_Semestre,
			CASE DATEPART(QQ, @CurrentDate)
			WHEN 1 THEN '01'
			WHEN 2 THEN '01'
			WHEN 3 THEN '02'
			WHEN 4 THEN '02'
			END + '-' + 
			CONVERT(NVARCHAR(4), DATEPART(YEAR, @CurrentDate)) as Cod_Semestre_Ano,
			CASE DATEPART(QQ, @CurrentDate)
			WHEN 1 THEN 'Primeiro Semestre'
			WHEN 2 THEN 'Primeiro Semestre'
			WHEN 3 THEN 'Segundo Semestre'
			WHEN 4 THEN 'Segundo Semestre'
			END + ' ' + 
			CONVERT(NVARCHAR(4), DATEPART(YEAR, @CurrentDate)) as D_Nome_Semestre_Ano,
			CONVERT(NVARCHAR(4), DATEPART(YEAR, @CurrentDate)) AS Ano,
			CASE DATEPART(DW, @CurrentDate)
			WHEN 1 THEN 'Fim de Semana'
			WHEN 2 THEN 'Dia Útil'
			WHEN 3 THEN 'Dia Útil'
			WHEN 4 THEN 'Dia Útil'
			WHEN 5 THEN 'Dia Útil'
			WHEN 6 THEN 'Dia Útil'
			WHEN 7 THEN 'Fim de Semana'
			END 
			AS Tipo_Dia

	SET @CurrentDate = DATEADD(DD, 1, @CurrentDate)
END



MERGE [Auxiliar].[dbo].[DIM_TEMPO] AS Destino

USING (SELECT * FROM @DIMDATE) AS Origem

--Condição: O produto existe nas 2 tabelas e o cliente também
ON (Destino.Cod_Dia = Origem.Cod_Dia)

--Se a condição for obedecida, ou seja, existem registros nas duas tabelas
--WHEN MATCHED THEN
    --UPDATE SET Destino.LastPurchaseDate = Origem.PurchaseDate
--Se a condição não foi obedecida porque o registro não existe na tabela de destino

WHEN NOT MATCHED BY TARGET THEN

    INSERT ([Cod_Dia], [Data], [Cod_Semana], [Nome_dia_Semana], [Cod_Mes], [Nome_Mes], [Cod_Mes_Ano], [Nome_Mes_Ano], [Cod_Trimestre], [Nome_Trimestre], [Cod_Trimestre_Ano], [Nome_Trimestre_Ano], [Cod_Semestre], [Nome_Semestre], [Cod_Semestre_Ano], [Nome_Semestre_Ano], [Ano], [Tipo_Dia])

    VALUES (Origem.[Cod_Dia], 
	        Origem.[Data], 
			Origem.[Cod_Semana], 
			Origem.[Nome_dia_Semana], 
			Origem.[Cod_Mes], 
			Origem.[Nome_Mes], 
			Origem.[Cod_Mes_Ano], 
			Origem.[Nome_Mes_Ano], 
			Origem.[Cod_Trimestre], 
			Origem.[Nome_Trimestre], 
			Origem.[Cod_Trimestre_Ano], 
			Origem.[Nome_Trimestre_Ano], 
			Origem.[Cod_Semestre], 
			Origem.[Nome_Semestre], 
			Origem.[Cod_Semestre_Ano], 
			Origem.[Nome_Semestre_Ano], 
			Origem.[Ano], [Tipo_Dia])

OUTPUT $action, Inserted.*, Deleted.*;
RETURN 0
GO
PRINT N'Creating [dbo].[FATO_001_MERGE]...';


GO
CREATE PROCEDURE [dbo].[FATO_001_MERGE]
 
AS
	MERGE dbo.FATO_001 AS Destino

USING 
(

--********************************************************************************--
--********************************************************************************--
--********************************************************************************--
--********************************************************************************--


select
      Cod_dia,
	  CD_FILIAL,
	  CD_CLIENTE,
	  CD_REPRES,
	  CD_REGIAO,
	  CD_ITEM,
	  SUM(QT_FATURADA) as QT_FATURADA,
	  SUM(VL_FATURADA) as VL_FATURADA,
	  CD_GRUPO,
	  CD_SUBGRUPO,
	  CD_LINHA,
	  CD_LINHA_COTA,
      CD_DIVISAO,
	  CURRENT_TIMESTAMP as DT_SINC
from(
select         B.Cod_dia,
               A.CD_FILIAL,
			   A.CD_CLIENTE,
			   A.CD_REPRES,
			   A.CD_REGIAO,
			   A.CD_ITEM,
			   A.QT_FATURADA,
			   A.VL_TOT_ITEM as VL_FATURADA,
			   A.CD_GRUPO,
			   A.CD_SUBGRUPO,
			   A.CD_LINHA,
			   isNull((select TOP 1 CD_LINHA_COTA from [FISCAL].[dbo].LINHAS_COTA H where A.CD_GRUPO = H.CD_GRUPO and A.CD_SUBGRUPO = H.CD_SUBGRUPO and A.CD_LINHA=H.CD_LINHA),'0') as CD_LINHA_COTA,
			   A.DIVISAO as CD_DIVISAO
			 
from 
[Fiscal].dbo.FATURAMENTO A
Join [Auxiliar].[dbo].DIM_TEMPO B on A.DT_EMISSAO = B.[Data]
where CD_CLIENTE IN (select CD_CLIENTE from DIM_CLIENTE) and
B.Data > '2018-01-01' and  A.CD_SUBGRUPO  in (select CD_SUBGRUPO from DIM_LINHAS_SGE)
) as T
where CD_GRUPO = 6 
group by
      Cod_dia,
	  CD_FILIAL,
	  CD_CLIENTE,
	  CD_REPRES,
	  CD_REGIAO,
	  CD_ITEM,
	  CD_GRUPO,
	  CD_SUBGRUPO,
	  CD_LINHA,
	  CD_LINHA_COTA,
      CD_DIVISAO


--********************************************************************************--
--********************************************************************************--
--********************************************************************************--
--********************************************************************************--
)

AS Origem

--Condição: O produto existe nas 2 tabelas e o cliente também

ON (  
      Destino.Cod_dia = Origem.Cod_dia and
	  Destino.CD_FILIAL = Origem.CD_FILIAL and
	  Destino.CD_CLIENTE = Origem.CD_CLIENTE and
	  Destino.CD_REPRES = Origem.CD_REPRES and
	  Destino.CD_REGIAO = Origem.CD_REGIAO and
	  Destino.CD_ITEM = Origem.CD_ITEM and
	  Destino.CD_GRUPO = Origem.CD_GRUPO and
	  Destino.CD_SUBGRUPO = Origem.CD_SUBGRUPO and
	  Destino.CD_LINHA = Origem.CD_LINHA and
	  Destino.CD_LINHA_COTA = Origem.CD_LINHA_COTA and
      Destino.CD_DIVISAO = Origem.CD_DIVISAO
	  )

--Se a condição for obedecida, ou seja, existem registros nas duas tabelas

WHEN MATCHED THEN

    UPDATE SET 
		Destino.QT_FATURADA = Origem.QT_FATURADA,
		Destino.VL_FATURADA = Origem.VL_FATURADA,
		Destino.DT_SINC=Origem.DT_SINC

--Se a condição não foi obedecida porque o registro não existe na tabela de destino

WHEN NOT MATCHED BY TARGET THEN

    INSERT (Cod_dia,
			CD_FILIAL,
			CD_CLIENTE,
			CD_REPRES,
			CD_REGIAO,
			CD_ITEM,
			QT_FATURADA,
			VL_FATURADA,
			CD_GRUPO,
			CD_SUBGRUPO,
			CD_LINHA,
			CD_LINHA_COTA,
			CD_DIVISAO,
			DT_SINC)

    VALUES (Origem.Cod_dia,
			Origem.CD_FILIAL,
			Origem.CD_CLIENTE,
			Origem.CD_REPRES,
			Origem.CD_REGIAO,
			Origem.CD_ITEM,
			Origem.QT_FATURADA,
			Origem.VL_FATURADA,
			Origem.CD_GRUPO,
			Origem.CD_SUBGRUPO,
			Origem.CD_LINHA,
			Origem.CD_LINHA_COTA,
			Origem.CD_DIVISAO,
			Origem.DT_SINC)

OUTPUT $action, Inserted.*, Deleted.*;


RETURN 0
GO
-- Refactoring step to update target server with deployed transaction logs

IF OBJECT_ID(N'dbo.__RefactorLog') IS NULL
BEGIN
    CREATE TABLE [dbo].[__RefactorLog] (OperationKey UNIQUEIDENTIFIER NOT NULL PRIMARY KEY)
    EXEC sp_addextendedproperty N'microsoft_database_tools_support', N'refactoring log', N'schema', N'dbo', N'table', N'__RefactorLog'
END
GO
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '9fcec65a-8a57-44cc-be23-462e80cd03a5')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('9fcec65a-8a57-44cc-be23-462e80cd03a5')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '4ad20753-2a7c-48cf-b02f-13ad4a1de088')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('4ad20753-2a7c-48cf-b02f-13ad4a1de088')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'cbb73f3d-6687-40ed-a325-88e36d54f9ef')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('cbb73f3d-6687-40ed-a325-88e36d54f9ef')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '74f1be31-0341-4375-b1b4-4328d099d38b')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('74f1be31-0341-4375-b1b4-4328d099d38b')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'ead72c12-1c1b-403e-9f43-1b54e9b43bec')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('ead72c12-1c1b-403e-9f43-1b54e9b43bec')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '9481b11b-edab-4c7d-beb6-ecbc35e275fb')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('9481b11b-edab-4c7d-beb6-ecbc35e275fb')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'c9e10eee-7a11-4699-8fb8-c86d292b3f28')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('c9e10eee-7a11-4699-8fb8-c86d292b3f28')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '057e8583-375b-4259-9010-e064e8f0dd66')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('057e8583-375b-4259-9010-e064e8f0dd66')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '147f6a67-4f0a-4270-8b39-3bdb21b96428')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('147f6a67-4f0a-4270-8b39-3bdb21b96428')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '162d6e5b-bd3b-4d01-95e6-ce6d863e5c2e')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('162d6e5b-bd3b-4d01-95e6-ce6d863e5c2e')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '562b0b27-a35c-4722-ad58-394efd3507ff')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('562b0b27-a35c-4722-ad58-394efd3507ff')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'ffbd9db3-8213-4abe-b13a-a816b20ac019')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('ffbd9db3-8213-4abe-b13a-a816b20ac019')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'a4ebd05b-8876-403f-a27b-94f1767ae40e')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('a4ebd05b-8876-403f-a27b-94f1767ae40e')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '5299d496-d605-4f6b-8ae3-7bfec8168fe3')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('5299d496-d605-4f6b-8ae3-7bfec8168fe3')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'a1423f7d-e606-4852-b021-d0e9df3939c8')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('a1423f7d-e606-4852-b021-d0e9df3939c8')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'c646a675-67d5-4591-beb4-0aa015a4db01')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('c646a675-67d5-4591-beb4-0aa015a4db01')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'd11e0d82-8703-401d-ad8e-b94443d68932')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('d11e0d82-8703-401d-ad8e-b94443d68932')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '16267513-7885-44d3-9459-8d8147636f93')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('16267513-7885-44d3-9459-8d8147636f93')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '6bcf523a-14ea-479a-a4d7-8376ac408e65')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('6bcf523a-14ea-479a-a4d7-8376ac408e65')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '13d05303-d670-4589-b1d8-11f3b61f7420')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('13d05303-d670-4589-b1d8-11f3b61f7420')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'cb3951c3-0d49-4b25-8349-39c345e474b6')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('cb3951c3-0d49-4b25-8349-39c345e474b6')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'ed5cac98-bbca-48dc-8e23-e672c4d818ca')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('ed5cac98-bbca-48dc-8e23-e672c4d818ca')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '8564cc18-ab69-4af4-9f95-3067c0946f6a')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('8564cc18-ab69-4af4-9f95-3067c0946f6a')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'a23994ca-1ed5-419c-8972-dcd581188c1b')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('a23994ca-1ed5-419c-8972-dcd581188c1b')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'faf97d44-b34a-46f7-83ba-8a671594c2bc')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('faf97d44-b34a-46f7-83ba-8a671594c2bc')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '387ba600-a880-4bd7-809c-58e124948cc0')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('387ba600-a880-4bd7-809c-58e124948cc0')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '93f1dac3-901d-432e-8822-ddeaf06c90c2')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('93f1dac3-901d-432e-8822-ddeaf06c90c2')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'ff4caba7-7065-43c6-b1f9-57c215f6eb62')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('ff4caba7-7065-43c6-b1f9-57c215f6eb62')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '31870169-b234-4b59-a910-72f229bbef51')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('31870169-b234-4b59-a910-72f229bbef51')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'fefdb80e-9b0c-4a05-a5b0-f7af6d669640')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('fefdb80e-9b0c-4a05-a5b0-f7af6d669640')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '0c419477-8dd7-4e93-9c71-e7bec8e8bf1e')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('0c419477-8dd7-4e93-9c71-e7bec8e8bf1e')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'ff3c197b-0f42-4d5c-8a56-97b12ff67a13')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('ff3c197b-0f42-4d5c-8a56-97b12ff67a13')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '731564d6-041d-42ee-a754-68e17032b440')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('731564d6-041d-42ee-a754-68e17032b440')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '204df8f4-b78f-442a-84a5-0c89368f3e1a')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('204df8f4-b78f-442a-84a5-0c89368f3e1a')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '62105a64-a117-41c1-b78f-efb03f86eb99')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('62105a64-a117-41c1-b78f-efb03f86eb99')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'f910433b-2459-4b74-b144-a5672ef97d17')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('f910433b-2459-4b74-b144-a5672ef97d17')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '43c553c2-f7b4-43bc-80d3-a1a405933dc3')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('43c553c2-f7b4-43bc-80d3-a1a405933dc3')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'bdd88998-5efd-4191-abc5-073a63c273f7')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('bdd88998-5efd-4191-abc5-073a63c273f7')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '5f8b07dc-acfe-43a6-a44a-3a1b6ab77d4e')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('5f8b07dc-acfe-43a6-a44a-3a1b6ab77d4e')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '22536a80-8eac-45b6-8968-477be3ac3214')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('22536a80-8eac-45b6-8968-477be3ac3214')

GO

GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [dbo].[DIM_LINHAS_AGRUPADAS] WITH CHECK CHECK CONSTRAINT [FK_DIM_LINHAS_AGRUPADAS_DIM_DIVISOES];

ALTER TABLE [dbo].[DIM_LINHAS_SGE] WITH CHECK CHECK CONSTRAINT [FK_DIM_LINHAS_SGE_DIM_DIVISOES];

ALTER TABLE [dbo].[DIM_PRODUTOS] WITH CHECK CHECK CONSTRAINT [FK_DIM_PRODUTOS_DIM_LINHAS_SGE];

ALTER TABLE [dbo].[FATO_001] WITH CHECK CHECK CONSTRAINT [FK_FATO_001_DIM_DIVISOES];

ALTER TABLE [dbo].[FATO_001] WITH CHECK CHECK CONSTRAINT [FK_FATO_001_DIM_LINHAS_AGRUPADAS];

ALTER TABLE [dbo].[FATO_001] WITH CHECK CHECK CONSTRAINT [FK_FATO_001_DIM_CLIENTE];

ALTER TABLE [dbo].[FATO_001] WITH CHECK CHECK CONSTRAINT [FK_FATO_001_DIM_TEMPO];

ALTER TABLE [dbo].[FATO_001] WITH CHECK CHECK CONSTRAINT [FK_FATO_001_DIM_FILIAL];

ALTER TABLE [dbo].[FATO_001] WITH CHECK CHECK CONSTRAINT [FK_FATO_001_DIM_LINHAS_SGE];

ALTER TABLE [dbo].[FATO_001] WITH CHECK CHECK CONSTRAINT [FK_FATO_001_DIM_REPRESENTANTE];


GO
PRINT N'Update complete.';


GO
