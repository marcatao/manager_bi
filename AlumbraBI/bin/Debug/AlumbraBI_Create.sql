/*
Deployment script for AlumbraBI

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "AlumbraBI"
:setvar DefaultFilePrefix "AlumbraBI"
:setvar DefaultDataPath ""
:setvar DefaultLogPath ""

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)] COLLATE SQL_Latin1_General_CP1_CI_AS
GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET TEMPORAL_HISTORY_RETENTION ON 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating [dbo].[FATO_003]...';


GO
CREATE TABLE [dbo].[FATO_003] (
    [Cod_Dia]       NVARCHAR (50)   NOT NULL,
    [CD_FILIAL]     SMALLINT        NOT NULL,
    [CD_REPRES]     INT             NOT NULL,
    [CD_REGIAO]     CHAR (6)        NOT NULL,
    [VL_COTA]       NUMERIC (16, 2) NULL,
    [CD_LINHA_COTA] INT             NOT NULL,
    [CD_DIVISAO]    CHAR (1)        NOT NULL,
    [DT_SINC]       DATETIME        NULL,
    CONSTRAINT [PK_FATO_003] PRIMARY KEY CLUSTERED ([Cod_Dia] ASC, [CD_FILIAL] ASC, [CD_REPRES] ASC, [CD_REGIAO] ASC, [CD_LINHA_COTA] ASC, [CD_DIVISAO] ASC)
);


GO
PRINT N'Creating [dbo].[DIM_REPRESENTANTE]...';


GO
CREATE TABLE [dbo].[DIM_REPRESENTANTE] (
    [CD_REPRES]   INT       NOT NULL,
    [CD_CGCCPF]   CHAR (18) NULL,
    [DN_FANTASIA] CHAR (20) NOT NULL,
    [TP_SITUACAO] CHAR (1)  NOT NULL,
    [NR_CONTRATO] CHAR (20) NULL,
    [CD_REGIAO]   CHAR (6)  NULL,
    [CD_GERENTE]  INT       NULL,
    [DT_SINC]     DATETIME  NULL,
    CONSTRAINT [PK_DIM_REPRESENTANTE] PRIMARY KEY CLUSTERED ([CD_REPRES] ASC)
);


GO
PRINT N'Creating [dbo].[FATO_002]...';


GO
CREATE TABLE [dbo].[FATO_002] (
    [Cod_Dia]          NVARCHAR (50)   NOT NULL,
    [CD_FILIAL]        SMALLINT        NOT NULL,
    [CD_CLIENTE]       INT             NOT NULL,
    [CD_REPRES]        INT             NOT NULL,
    [CD_REGIAO]        CHAR (6)        NOT NULL,
    [CD_ITEM]          CHAR (16)       NOT NULL,
    [QT_VENDIDA]       NUMERIC (12, 4) NULL,
    [VL_VENDIDO]       NUMERIC (16, 2) NOT NULL,
    [CD_GRUPO]         SMALLINT        NOT NULL,
    [CD_SUBGRUPO]      SMALLINT        NOT NULL,
    [CD_LINHA]         CHAR (6)        NOT NULL,
    [CD_LINHA_COTA]    INT             NOT NULL,
    [CD_DIVISAO]       CHAR (1)        NOT NULL,
    [CD_DIVISAO_LINHA] CHAR (1)        NULL,
    [DT_SINC]          DATETIME        NULL,
    CONSTRAINT [PK_FATO_002] PRIMARY KEY CLUSTERED ([Cod_Dia] ASC, [CD_FILIAL] ASC, [CD_CLIENTE] ASC, [CD_REPRES] ASC, [CD_REGIAO] ASC, [CD_ITEM] ASC, [VL_VENDIDO] ASC, [CD_GRUPO] ASC, [CD_SUBGRUPO] ASC, [CD_LINHA] ASC, [CD_LINHA_COTA] ASC, [CD_DIVISAO] ASC)
);


GO
PRINT N'Creating [dbo].[DIM_PRODUTOS]...';


GO
CREATE TABLE [dbo].[DIM_PRODUTOS] (
    [CD_FILIAL]       INT             NOT NULL,
    [CD_ITEM]         CHAR (16)       NOT NULL,
    [DN_ITEM_COM]     CHAR (50)       NULL,
    [DN_ITEM_IND]     CHAR (50)       NULL,
    [CD_CLASSE_ABC]   CHAR (1)        NULL,
    [CD_CLASSIF]      NUMERIC (10)    NULL,
    [CD_GRUPO]        SMALLINT        NULL,
    [CD_SUBGRUPO]     SMALLINT        NULL,
    [CD_LINHA]        CHAR (6)        NULL,
    [VL_CUSTO_INDUST] NUMERIC (12, 4) NULL,
    [TP_OBSOLETO_IND] CHAR (1)        NULL,
    [TP_OBSOLETO_COM] CHAR (1)        NULL,
    [CD_ORIG_MERCAD]  SMALLINT        NULL,
    [DT_SINC]         DATETIME        NULL,
    CONSTRAINT [PK_DIM_PRODUTOS] PRIMARY KEY CLUSTERED ([CD_ITEM] ASC)
);


GO
PRINT N'Creating [dbo].[DIM_LINHAS_SGE]...';


GO
CREATE TABLE [dbo].[DIM_LINHAS_SGE] (
    [CD_GRUPO]    SMALLINT  NOT NULL,
    [CD_SUBGRUPO] SMALLINT  NOT NULL,
    [DN_GRUPO]    CHAR (25) NULL,
    [CD_DIVISAO]  CHAR (1)  NULL,
    [DT_SINC]     DATETIME  NULL,
    CONSTRAINT [PK_DIM_LINHAS_SGE] PRIMARY KEY CLUSTERED ([CD_GRUPO] ASC, [CD_SUBGRUPO] ASC)
);


GO
PRINT N'Creating [dbo].[DIM_DIVISOES]...';


GO
CREATE TABLE [dbo].[DIM_DIVISOES] (
    [CD_DIVISAO] CHAR (1)      NOT NULL,
    [DN_DIVISAO] NVARCHAR (50) NULL,
    [ICON]       CHAR (15)     NULL,
    [DT_SINC]    DATETIME      NULL,
    PRIMARY KEY CLUSTERED ([CD_DIVISAO] ASC)
);


GO
PRINT N'Creating [dbo].[FATO_001]...';


GO
CREATE TABLE [dbo].[FATO_001] (
    [Cod_Dia]           NVARCHAR (50)   NOT NULL,
    [CD_FILIAL]         SMALLINT        NOT NULL,
    [CD_CLIENTE]        INT             NOT NULL,
    [CD_REPRES]         INT             NOT NULL,
    [CD_REGIAO]         CHAR (6)        NOT NULL,
    [CD_ITEM]           CHAR (16)       NOT NULL,
    [QT_FATURADA]       NUMERIC (12, 4) NULL,
    [VL_FATURADA]       NUMERIC (16, 2) NULL,
    [CD_GRUPO]          SMALLINT        NOT NULL,
    [CD_SUBGRUPO]       SMALLINT        NOT NULL,
    [CD_LINHA]          CHAR (6)        NOT NULL,
    [CD_LINHA_COTA]     INT             NOT NULL,
    [CD_DIVISAO]        CHAR (1)        NOT NULL,
    [CD_DIVISAO_LINHAS] CHAR (1)        NULL,
    [DT_SINC]           DATETIME        NULL,
    CONSTRAINT [PK_FATO_001] PRIMARY KEY CLUSTERED ([Cod_Dia] ASC, [CD_FILIAL] ASC, [CD_CLIENTE] ASC, [CD_REPRES] ASC, [CD_REGIAO] ASC, [CD_ITEM] ASC, [CD_GRUPO] ASC, [CD_SUBGRUPO] ASC, [CD_LINHA] ASC, [CD_LINHA_COTA] ASC, [CD_DIVISAO] ASC)
);


GO
PRINT N'Creating [dbo].[DIM_TEMPO]...';


GO
CREATE TABLE [dbo].[DIM_TEMPO] (
    [Cod_Dia]            NVARCHAR (50) NOT NULL,
    [Data]               DATE          NULL,
    [Cod_Semana]         INT           NULL,
    [Nome_dia_Semana]    NVARCHAR (50) NULL,
    [Cod_Mes]            INT           NULL,
    [Nome_Mes]           NVARCHAR (50) NULL,
    [Cod_Mes_Ano]        NVARCHAR (50) NULL,
    [Nome_Mes_Ano]       NVARCHAR (50) NULL,
    [Cod_Trimestre]      INT           NULL,
    [Nome_Trimestre]     NVARCHAR (50) NULL,
    [Cod_Trimestre_Ano]  NVARCHAR (50) NULL,
    [Nome_Trimestre_Ano] NVARCHAR (50) NULL,
    [Cod_Semestre]       INT           NULL,
    [Nome_Semestre]      NVARCHAR (50) NULL,
    [Cod_Semestre_Ano]   NVARCHAR (50) NULL,
    [Nome_Semestre_Ano]  NVARCHAR (50) NULL,
    [Ano]                NVARCHAR (50) NULL,
    [Tipo_Dia]           NVARCHAR (50) NULL,
    [Dia]                NCHAR (2)     NULL,
    PRIMARY KEY CLUSTERED ([Cod_Dia] ASC)
);


GO
PRINT N'Creating [dbo].[DIM_LINHAS_AGRUPADAS]...';


GO
CREATE TABLE [dbo].[DIM_LINHAS_AGRUPADAS] (
    [CD_LINHA_COTA] INT           NOT NULL,
    [DN_LINHA_COTA] VARCHAR (150) NULL,
    [CD_DIVISAO]    CHAR (1)      NULL,
    [DT_SINC]       DATETIME      NULL,
    PRIMARY KEY CLUSTERED ([CD_LINHA_COTA] ASC)
);


GO
PRINT N'Creating [dbo].[DIM_CLIENTE]...';


GO
CREATE TABLE [dbo].[DIM_CLIENTE] (
    [CD_CLIENTE]      INT             NOT NULL,
    [CD_CGCCPF]       CHAR (18)       NULL,
    [DN_FANTASIA]     CHAR (20)       NULL,
    [CD_MUNICIPIO]    CHAR (5)        NULL,
    [DN_MUNICIPIO]    CHAR (35)       NULL,
    [DN_BAIRRO]       CHAR (15)       NULL,
    [CD_CEP]          INT             NULL,
    [NR_ENDERECO]     INT             NULL,
    [CD_UF]           CHAR (4)        NULL,
    [DN_UF]           CHAR (20)       NULL,
    [TP_SITUACAO_SGE] CHAR (1)        NULL,
    [VL_LIMITE_CRED]  NUMERIC (16, 2) NULL,
    [DT_IMPLANTACAO]  DATE            NULL,
    [CD_CNAE]         CHAR (7)        NULL,
    [DT_SINC]         DATETIME        NULL,
    PRIMARY KEY CLUSTERED ([CD_CLIENTE] ASC)
);


GO
PRINT N'Creating [dbo].[DIM_FILIAL]...';


GO
CREATE TABLE [dbo].[DIM_FILIAL] (
    [CD_FILIAL]   SMALLINT  NOT NULL,
    [DN_FANTASIA] CHAR (20) NULL,
    [DN_RAZAO]    CHAR (40) NULL,
    [CD_CGCCPF]   CHAR (18) NULL,
    [DT_SINC]     DATETIME  NULL,
    PRIMARY KEY CLUSTERED ([CD_FILIAL] ASC)
);


GO
PRINT N'Creating [dbo].[DIM_REGIAO]...';


GO
CREATE TABLE [dbo].[DIM_REGIAO] (
    [CD_REGIAO]    CHAR (6)  NOT NULL,
    [SUPERVISOR]   CHAR (50) NULL,
    [DN_REGIAO]    CHAR (50) NULL,
    [CD_FUNC_RESP] INT       NULL,
    PRIMARY KEY CLUSTERED ([CD_REGIAO] ASC)
);


GO
PRINT N'Creating [dbo].[FK_FATO_003_DIM_DIVISOES]...';


GO
ALTER TABLE [dbo].[FATO_003]
    ADD CONSTRAINT [FK_FATO_003_DIM_DIVISOES] FOREIGN KEY ([CD_DIVISAO]) REFERENCES [dbo].[DIM_DIVISOES] ([CD_DIVISAO]);


GO
PRINT N'Creating [dbo].[FK_FATO_003_DIM_TEMPO]...';


GO
ALTER TABLE [dbo].[FATO_003]
    ADD CONSTRAINT [FK_FATO_003_DIM_TEMPO] FOREIGN KEY ([Cod_Dia]) REFERENCES [dbo].[DIM_TEMPO] ([Cod_Dia]);


GO
PRINT N'Creating [dbo].[FK_FATO_003_DIM_REGIAO]...';


GO
ALTER TABLE [dbo].[FATO_003]
    ADD CONSTRAINT [FK_FATO_003_DIM_REGIAO] FOREIGN KEY ([CD_REGIAO]) REFERENCES [dbo].[DIM_REGIAO] ([CD_REGIAO]);


GO
PRINT N'Creating [dbo].[FK_FATO_003_DIM_LINHAS_AGRUPADAS]...';


GO
ALTER TABLE [dbo].[FATO_003]
    ADD CONSTRAINT [FK_FATO_003_DIM_LINHAS_AGRUPADAS] FOREIGN KEY ([CD_LINHA_COTA]) REFERENCES [dbo].[DIM_LINHAS_AGRUPADAS] ([CD_LINHA_COTA]);


GO
PRINT N'Creating [dbo].[FK_FATO_002_DIM_DIVISAO]...';


GO
ALTER TABLE [dbo].[FATO_002]
    ADD CONSTRAINT [FK_FATO_002_DIM_DIVISAO] FOREIGN KEY ([CD_DIVISAO]) REFERENCES [dbo].[DIM_DIVISOES] ([CD_DIVISAO]);


GO
PRINT N'Creating [dbo].[FK_FATO_002_DIM_LINHAS_AGRUPADAS]...';


GO
ALTER TABLE [dbo].[FATO_002]
    ADD CONSTRAINT [FK_FATO_002_DIM_LINHAS_AGRUPADAS] FOREIGN KEY ([CD_LINHA_COTA]) REFERENCES [dbo].[DIM_LINHAS_AGRUPADAS] ([CD_LINHA_COTA]);


GO
PRINT N'Creating [dbo].[FK_FATO_002_DIM_CLIENTE]...';


GO
ALTER TABLE [dbo].[FATO_002]
    ADD CONSTRAINT [FK_FATO_002_DIM_CLIENTE] FOREIGN KEY ([CD_CLIENTE]) REFERENCES [dbo].[DIM_CLIENTE] ([CD_CLIENTE]);


GO
PRINT N'Creating [dbo].[FK_FATO_002_DIM_TEMPO]...';


GO
ALTER TABLE [dbo].[FATO_002]
    ADD CONSTRAINT [FK_FATO_002_DIM_TEMPO] FOREIGN KEY ([Cod_Dia]) REFERENCES [dbo].[DIM_TEMPO] ([Cod_Dia]);


GO
PRINT N'Creating [dbo].[FK_FATO_002_DIM_FILIAL]...';


GO
ALTER TABLE [dbo].[FATO_002]
    ADD CONSTRAINT [FK_FATO_002_DIM_FILIAL] FOREIGN KEY ([CD_FILIAL]) REFERENCES [dbo].[DIM_FILIAL] ([CD_FILIAL]);


GO
PRINT N'Creating [dbo].[FK_FATO_002_DIM_LINHAS_SGE]...';


GO
ALTER TABLE [dbo].[FATO_002]
    ADD CONSTRAINT [FK_FATO_002_DIM_LINHAS_SGE] FOREIGN KEY ([CD_GRUPO], [CD_SUBGRUPO]) REFERENCES [dbo].[DIM_LINHAS_SGE] ([CD_GRUPO], [CD_SUBGRUPO]);


GO
PRINT N'Creating [dbo].[FK_FATO_002_DIM_REPRESENTANTE]...';


GO
ALTER TABLE [dbo].[FATO_002]
    ADD CONSTRAINT [FK_FATO_002_DIM_REPRESENTANTE] FOREIGN KEY ([CD_REPRES]) REFERENCES [dbo].[DIM_REPRESENTANTE] ([CD_REPRES]);


GO
PRINT N'Creating [dbo].[FK_DIM_PRODUTOS_DIM_LINHAS_SGE]...';


GO
ALTER TABLE [dbo].[DIM_PRODUTOS]
    ADD CONSTRAINT [FK_DIM_PRODUTOS_DIM_LINHAS_SGE] FOREIGN KEY ([CD_GRUPO], [CD_SUBGRUPO]) REFERENCES [dbo].[DIM_LINHAS_SGE] ([CD_GRUPO], [CD_SUBGRUPO]);


GO
PRINT N'Creating [dbo].[FK_DIM_LINHAS_SGE_DIM_DIVISOES]...';


GO
ALTER TABLE [dbo].[DIM_LINHAS_SGE]
    ADD CONSTRAINT [FK_DIM_LINHAS_SGE_DIM_DIVISOES] FOREIGN KEY ([CD_DIVISAO]) REFERENCES [dbo].[DIM_DIVISOES] ([CD_DIVISAO]);


GO
PRINT N'Creating [dbo].[FK_FATO_001_DIM_DIVISOES]...';


GO
ALTER TABLE [dbo].[FATO_001]
    ADD CONSTRAINT [FK_FATO_001_DIM_DIVISOES] FOREIGN KEY ([CD_DIVISAO]) REFERENCES [dbo].[DIM_DIVISOES] ([CD_DIVISAO]);


GO
PRINT N'Creating [dbo].[FK_FATO_001_DIM_LINHAS_AGRUPADAS]...';


GO
ALTER TABLE [dbo].[FATO_001]
    ADD CONSTRAINT [FK_FATO_001_DIM_LINHAS_AGRUPADAS] FOREIGN KEY ([CD_LINHA_COTA]) REFERENCES [dbo].[DIM_LINHAS_AGRUPADAS] ([CD_LINHA_COTA]);


GO
PRINT N'Creating [dbo].[FK_FATO_001_DIM_CLIENTE]...';


GO
ALTER TABLE [dbo].[FATO_001]
    ADD CONSTRAINT [FK_FATO_001_DIM_CLIENTE] FOREIGN KEY ([CD_CLIENTE]) REFERENCES [dbo].[DIM_CLIENTE] ([CD_CLIENTE]);


GO
PRINT N'Creating [dbo].[FK_FATO_001_DIM_TEMPO]...';


GO
ALTER TABLE [dbo].[FATO_001]
    ADD CONSTRAINT [FK_FATO_001_DIM_TEMPO] FOREIGN KEY ([Cod_Dia]) REFERENCES [dbo].[DIM_TEMPO] ([Cod_Dia]);


GO
PRINT N'Creating [dbo].[FK_FATO_001_DIM_FILIAL]...';


GO
ALTER TABLE [dbo].[FATO_001]
    ADD CONSTRAINT [FK_FATO_001_DIM_FILIAL] FOREIGN KEY ([CD_FILIAL]) REFERENCES [dbo].[DIM_FILIAL] ([CD_FILIAL]);


GO
PRINT N'Creating [dbo].[FK_FATO_001_DIM_LINHAS_SGE]...';


GO
ALTER TABLE [dbo].[FATO_001]
    ADD CONSTRAINT [FK_FATO_001_DIM_LINHAS_SGE] FOREIGN KEY ([CD_GRUPO], [CD_SUBGRUPO]) REFERENCES [dbo].[DIM_LINHAS_SGE] ([CD_GRUPO], [CD_SUBGRUPO]);


GO
PRINT N'Creating [dbo].[FK_FATO_001_DIM_REPRESENTANTE]...';


GO
ALTER TABLE [dbo].[FATO_001]
    ADD CONSTRAINT [FK_FATO_001_DIM_REPRESENTANTE] FOREIGN KEY ([CD_REPRES]) REFERENCES [dbo].[DIM_REPRESENTANTE] ([CD_REPRES]);


GO
PRINT N'Creating [dbo].[FK_DIM_LINHAS_AGRUPADAS_DIM_DIVISOES]...';


GO
ALTER TABLE [dbo].[DIM_LINHAS_AGRUPADAS]
    ADD CONSTRAINT [FK_DIM_LINHAS_AGRUPADAS_DIM_DIVISOES] FOREIGN KEY ([CD_DIVISAO]) REFERENCES [dbo].[DIM_DIVISOES] ([CD_DIVISAO]);


GO
PRINT N'Creating [dbo].[DIM_FATO_003_MERGE]...';


GO
CREATE PROCEDURE [dbo].[DIM_FATO_003_MERGE]
 as 
MERGE dbo.FATO_003 AS Destino

USING 
(

--********************************************************************************--
--********************************************************************************--
--********************************************************************************--
--********************************************************************************--

 
select Cod_Dia, 
      '1'as CD_FILIAL,
	  CD_REPRES,
	  CD_REGIAO,
	  COTA_LINHA as VL_COTA,
	  ID_LINHA as CD_LINHA_COTA,
	  DIVISAO as CD_DIVISAO,
	  CURRENT_TIMESTAMP as DT_SINC 
FROM(
SELECT F.Cod_Dia, 
       B.CD_REPRES,
	   C.CD_REGIAO,
       (SUM(B.VALOR_COTA)*(SUM(E.VALOR)))/100 as COTA, 

A.DIVISAO,  B.ID_COTA,
D.ID_LINHA,
SUM(D.PERCENTUAL) as PERCENTUAL_LINHA,
case SUM(D.PERCENTUAL) when 0 then '0' ELSE
(((SUM(B.VALOR_COTA)*(SUM(E.VALOR)))/100)*(SUM(D.PERCENTUAL)))/100
END as COTA_LINHA
  FROM [INTRANET].[dbo].[COTA006] A
  join [INTRANET].[dbo].[COTA008] B on  A.ID = B.ID_COTA
  join [FISCAL].dbo.GE060 C on B.CD_REPRES = C.CD_REPRES and C.CD_FILIAL=1
  join [intranet].[dbo].COTA009 D on A.ID = D.ID_COTA and B.CD_REPRES = D.ID_REPRES
  join [INTRANET].[dbo].COTA010 E on A.ID = E.ID_COTA and C.CD_REGIAO = E.CD_REGIAO
  join [Auxiliar].dbo.DIM_TEMPO F on E.PERIODO = F.Data
group by  F.Cod_Dia,C.CD_REGIAO, B.ID_COTA, A.DIVISAO,B.CD_REPRES,ID_LINHA , DT_INICIO, DT_FIM
) as DT


--********************************************************************************--
--********************************************************************************--
--********************************************************************************--
--********************************************************************************--
)

AS Origem

--Condição: O produto existe nas 2 tabelas e o cliente também

ON (  
      Destino.Cod_dia = Origem.Cod_dia and
	  Destino.CD_FILIAL = Origem.CD_FILIAL and
	  Destino.CD_REPRES = Origem.CD_REPRES and
	  Destino.CD_REGIAO = Origem.CD_REGIAO and
	  Destino.CD_LINHA_COTA = Origem.CD_LINHA_COTA and
      Destino.CD_DIVISAO = Origem.CD_DIVISAO 
	  )

--Se a condição for obedecida, ou seja, existem registros nas duas tabelas

WHEN MATCHED THEN

    UPDATE SET 
		Destino.VL_COTA = Origem.VL_COTA

--Se a condição não foi obedecida porque o registro não existe na tabela de destino

WHEN NOT MATCHED BY TARGET THEN

    INSERT (Cod_dia,
			CD_FILIAL,
			CD_REPRES,
			CD_REGIAO,
			VL_COTA,	
			CD_LINHA_COTA,
			CD_DIVISAO,
			DT_SINC)

    VALUES (Origem.Cod_dia,
			Origem.CD_FILIAL,
			Origem.CD_REPRES,
			Origem.CD_REGIAO,
			Origem.VL_COTA,
			Origem.CD_LINHA_COTA,
			Origem.CD_DIVISAO,
			Origem.DT_SINC)

OUTPUT $action, Inserted.*, Deleted.*;
RETURN 0
GO
PRINT N'Creating [dbo].[DIM_FATO_002_MERGE]...';


GO
CREATE PROCEDURE [dbo].[DIM_FATO_002_MERGE]
 
AS

MERGE dbo.FATO_002 AS Destino

USING (


--********************************************************************************--
--********************************************************************************--
--********************************************************************************--
--********************************************************************************--


select 
      Cod_dia,
	  CD_FILIAL,
	  CD_CLIENTE,
	  CD_REPRES,
	  CD_REGIAO,
	  CD_ITEM,
	  SUM(QTD) as QT_VENDIDA,
	  SUM(VALOR) as VL_VENDIDO,
	  CD_GRUPO,
	  CD_SUBGRUPO,
	  CD_LINHA,
	  CD_LINHA_COTA,
      CD_DIVISAO,
	  CD_DIVISAO_LINHA,
	  CURRENT_TIMESTAMP as DT_SINC
from(

select         B.Cod_dia,
               A.CD_FILIAL,
			   A.CD_CLIENTE,
			   A.CD_REPRES,
			   A.CD_REGIAO,
			   A.CD_ITEM,
			   A.QTD,
			   A.VALOR,
			   '6' as CD_GRUPO,
			   A.CD_SUBGRUPO,
			   A.CD_LINHA,
			   isNull((select TOP 1 CD_LINHA_COTA from [FISCAL].[dbo].LINHAS_COTA H where 6 = H.CD_GRUPO and A.CD_SUBGRUPO = H.CD_SUBGRUPO and A.CD_LINHA=H.CD_LINHA),'0') as CD_LINHA_COTA,
			   A.DIVISAO as CD_DIVISAO,
			   A.CD_DIVISAO_LINHA
			 
from 
[Fiscal].dbo.VENDAS A
Join [Auxiliar].[dbo].DIM_TEMPO B on A.DT_IMPLANTACAO = B.[Data]
where CD_CLIENTE IN (select CD_CLIENTE from DIM_CLIENTE) and
B.Data > '2010-01-01' and  A.CD_SUBGRUPO  in (select CD_SUBGRUPO from DIM_LINHAS_SGE)
) as T
where CD_GRUPO = 6 
group by
      Cod_dia,
	  CD_FILIAL,
	  CD_CLIENTE,
	  CD_REPRES,
	  CD_REGIAO,
	  CD_ITEM,
	  CD_GRUPO,
	  CD_SUBGRUPO,
	  CD_LINHA,
	  CD_LINHA_COTA,
      CD_DIVISAO,
	  CD_DIVISAO_LINHA

--********************************************************************************--
--********************************************************************************--
--********************************************************************************--
--********************************************************************************--

)

AS Origem
ON (  
      Destino.Cod_dia = Origem.Cod_dia and
	  Destino.CD_FILIAL = Origem.CD_FILIAL and
	  Destino.CD_CLIENTE = Origem.CD_CLIENTE and
	  Destino.CD_REPRES = Origem.CD_REPRES and
	  Destino.CD_REGIAO = Origem.CD_REGIAO and
	  Destino.CD_ITEM = Origem.CD_ITEM and
	  Destino.CD_GRUPO = Origem.CD_GRUPO and
	  Destino.CD_SUBGRUPO = Origem.CD_SUBGRUPO and
	  Destino.CD_LINHA = Origem.CD_LINHA and
	  Destino.CD_LINHA_COTA = Origem.CD_LINHA_COTA and
      Destino.CD_DIVISAO = Origem.CD_DIVISAO and 
	  Destino.CD_DIVISAO_LINHA = Origem.CD_DIVISAO_LINHA
	  )

--Se a condição for obedecida, ou seja, existem registros nas duas tabelas

WHEN MATCHED THEN

    UPDATE SET 
		Destino.QT_VENDIDA = Origem.QT_VENDIDA,
		Destino.VL_VENDIDO = Origem.VL_VENDIDO,
		Destino.DT_SINC=Origem.DT_SINC

--Se a condição não foi obedecida porque o registro não existe na tabela de destino

WHEN NOT MATCHED BY TARGET THEN

    INSERT (Cod_dia,
			CD_FILIAL,
			CD_CLIENTE,
			CD_REPRES,
			CD_REGIAO,
			CD_ITEM,
			QT_VENDIDA,
			VL_VENDIDO,
			CD_GRUPO,
			CD_SUBGRUPO,
			CD_LINHA,
			CD_LINHA_COTA,
			CD_DIVISAO,
			CD_DIVISAO_LINHA,
			DT_SINC)

    VALUES (Origem.Cod_dia,
			Origem.CD_FILIAL,
			Origem.CD_CLIENTE,
			Origem.CD_REPRES,
			Origem.CD_REGIAO,
			Origem.CD_ITEM,
			Origem.QT_VENDIDA,
			Origem.VL_VENDIDO,
			Origem.CD_GRUPO,
			Origem.CD_SUBGRUPO,
			Origem.CD_LINHA,
			Origem.CD_LINHA_COTA,
			Origem.CD_DIVISAO,
			Origem.CD_DIVISAO_LINHA,
			Origem.DT_SINC)

OUTPUT $action, Inserted.*, Deleted.*;

 
RETURN 0
GO
PRINT N'Creating [dbo].[DIM_REPRESENTANTE_MERGE]...';


GO
CREATE PROCEDURE [dbo].[DIM_REPRESENTANTE_MERGE]
 
AS
 

MERGE [Auxiliar].[dbo].DIM_REPRESENTANTE AS Destino

USING (

select distinct(cd_repres) as CD_REPRES, 
       CD_CGCCPF,
	   DN_FANTASIA,
	   TP_SITUACAO,
	   NR_CONTRATO,
	   CD_REGIAO,
	   CD_GERENTE,
	   CURRENT_TIMESTAMP as DT_SINC
from [FISCAL].[dbo].ge060
where CD_FILIAL not in (3,4,5,6)
 
 


) AS Origem

--Condição: O produto existe nas 2 tabelas e o cliente também

ON (Destino.CD_REPRES = Origem.CD_REPRES)

--Se a condição for obedecida, ou seja, existem registros nas duas tabelas

WHEN MATCHED THEN

    UPDATE SET Destino.CD_CGCCPF = Origem.CD_CGCCPF,
		    	Destino.DN_FANTASIA = Origem.DN_FANTASIA,
				Destino.TP_SITUACAO	= Origem.TP_SITUACAO,
				Destino.NR_CONTRATO	= Origem.NR_CONTRATO,
				Destino.CD_REGIAO = Origem.CD_REGIAO,
				Destino.CD_GERENTE = Origem.CD_GERENTE,
				Destino.DT_SINC = Origem.DT_SINC

--Se a condição não foi obedecida porque o registro não existe na tabela de destino

WHEN NOT MATCHED BY TARGET THEN

    INSERT (CD_REPRES, 
			CD_CGCCPF,
			DN_FANTASIA,
			TP_SITUACAO,
			NR_CONTRATO,
			CD_REGIAO,
			CD_GERENTE,
			DT_SINC )

    VALUES (Origem.CD_REPRES, 
			Origem.CD_CGCCPF,
			Origem.DN_FANTASIA,
			Origem.TP_SITUACAO,
			Origem.NR_CONTRATO,
			Origem.CD_REGIAO,
			Origem.CD_GERENTE,
			Origem.DT_SINC )

OUTPUT $action, Inserted.*, Deleted.*;
 

RETURN 0
GO
PRINT N'Creating [dbo].[FATO_001_MERGE]...';


GO
CREATE PROCEDURE [dbo].[FATO_001_MERGE]
 
AS
	MERGE dbo.FATO_001 AS Destino

USING 
(

--********************************************************************************--
--********************************************************************************--
--********************************************************************************--
--********************************************************************************--




select
      Cod_dia,
	  CD_FILIAL,
	  CD_CLIENTE,
	  CD_REPRES,
	  CD_REGIAO,
	  CD_ITEM,
	  SUM(QT_FATURADA) as QT_FATURADA,
	  SUM(VL_FATURADA) as VL_FATURADA,
	  CD_GRUPO,
	  CD_SUBGRUPO,
	  CD_LINHA,
	  CD_LINHA_COTA,
      CD_DIVISAO,
	  CD_DIVISAO_LINHAS,
	  CURRENT_TIMESTAMP as DT_SINC
from(
select         B.Cod_dia,
               A.CD_FILIAL,
			   A.CD_CLIENTE,
			   A.CD_REPRES,
			   A.CD_REGIAO,
			   A.CD_ITEM,
			   A.QT_FATURADA,
			   A.VL_TOT_ITEM as VL_FATURADA,
			   A.CD_GRUPO,
			   A.CD_SUBGRUPO,
			   A.CD_LINHA,
			   isNull((select TOP 1 CD_LINHA_COTA from [FISCAL].[dbo].LINHAS_COTA H where A.CD_GRUPO = H.CD_GRUPO and A.CD_SUBGRUPO = H.CD_SUBGRUPO and A.CD_LINHA=H.CD_LINHA),'0') as CD_LINHA_COTA,
			   A.DIVISAO as CD_DIVISAO,
			   A.DIVISAO_LINHAS as CD_DIVISAO_LINHAS
			 
from 
[Fiscal].dbo.FATURAMENTO A
Join [Auxiliar].[dbo].DIM_TEMPO B on A.DT_EMISSAO = B.[Data]
where CD_CLIENTE IN (select CD_CLIENTE from DIM_CLIENTE) and
B.Data > '2010-01-01' and  A.CD_SUBGRUPO  in (select CD_SUBGRUPO from DIM_LINHAS_SGE)
) as T
where CD_GRUPO = 6 
group by
      Cod_dia,
	  CD_FILIAL,
	  CD_CLIENTE,
	  CD_REPRES,
	  CD_REGIAO,
	  CD_ITEM,
	  CD_GRUPO,
	  CD_SUBGRUPO,
	  CD_LINHA,
	  CD_LINHA_COTA,
      CD_DIVISAO,
	  CD_DIVISAO_LINHAS


--********************************************************************************--
--********************************************************************************--
--********************************************************************************--
--********************************************************************************--
)

AS Origem

--Condição: O produto existe nas 2 tabelas e o cliente também

ON (  
      Destino.Cod_dia = Origem.Cod_dia and
	  Destino.CD_FILIAL = Origem.CD_FILIAL and
	  Destino.CD_CLIENTE = Origem.CD_CLIENTE and
	  Destino.CD_REPRES = Origem.CD_REPRES and
	  Destino.CD_REGIAO = Origem.CD_REGIAO and
	  Destino.CD_ITEM = Origem.CD_ITEM and
	  Destino.CD_GRUPO = Origem.CD_GRUPO and
	  Destino.CD_SUBGRUPO = Origem.CD_SUBGRUPO and
	  Destino.CD_LINHA = Origem.CD_LINHA and
	  Destino.CD_LINHA_COTA = Origem.CD_LINHA_COTA and
      Destino.CD_DIVISAO = Origem.CD_DIVISAO and
	  Destino.CD_DIVISAO_LINHAS = Origem.CD_DIVISAO_LINHAS
	  )

--Se a condição for obedecida, ou seja, existem registros nas duas tabelas

WHEN MATCHED THEN

    UPDATE SET 
		Destino.QT_FATURADA = Origem.QT_FATURADA,
		Destino.VL_FATURADA = Origem.VL_FATURADA,
		Destino.DT_SINC=Origem.DT_SINC

--Se a condição não foi obedecida porque o registro não existe na tabela de destino

WHEN NOT MATCHED BY TARGET THEN

    INSERT (Cod_dia,
			CD_FILIAL,
			CD_CLIENTE,
			CD_REPRES,
			CD_REGIAO,
			CD_ITEM,
			QT_FATURADA,
			VL_FATURADA,
			CD_GRUPO,
			CD_SUBGRUPO,
			CD_LINHA,
			CD_LINHA_COTA,
			CD_DIVISAO,
			CD_DIVISAO_LINHAS,
			DT_SINC)

    VALUES (Origem.Cod_dia,
			Origem.CD_FILIAL,
			Origem.CD_CLIENTE,
			Origem.CD_REPRES,
			Origem.CD_REGIAO,
			Origem.CD_ITEM,
			Origem.QT_FATURADA,
			Origem.VL_FATURADA,
			Origem.CD_GRUPO,
			Origem.CD_SUBGRUPO,
			Origem.CD_LINHA,
			Origem.CD_LINHA_COTA,
			Origem.CD_DIVISAO,
			Origem.CD_DIVISAO_LINHAS,
			Origem.DT_SINC)

OUTPUT $action, Inserted.*, Deleted.*;


RETURN 0
GO
PRINT N'Creating [dbo].[DIM_PRODUTOS_MERGE]...';


GO
CREATE PROCEDURE [dbo].[DIM_PRODUTOS_MERGE]
 
AS
	MERGE [Auxiliar].[dbo].DIM_PRODUTOS AS Destino

USING (

select isnull(CD_FILIAL,1) as CD_FILIAL,
       A.CD_ITEM,
	   DN_ITEM_COM,
	   A.DN_ITEM_IND, 
	   B.CD_CLASSE_ABC, 
	   A.CD_CLASSIF,
	   A.CD_GRUPO,
	   A.CD_SUBGRUPO,
	   C.CD_LINHA,
	   C.VL_CUSTO_INDUST,
	   B.TP_OBSOLETO as TP_OBSOLETO_IND, 
	   C.TP_OBSOLETO as TP_OBSOLETO_COM,
	   C.CD_ORIG_MERCAD,
	   CURRENT_TIMESTAMP as DT_SINC

from [FISCAL].[dbo].GE003 A
join [FISCAL].[dbo].CC105 C on A.CD_ITEM = C.CD_ITEM and A.CD_GRUPO = C.CD_GRUPO and A.CD_SUBGRUPO = C.CD_SUBGRUPO
left join [FISCAL].[dbo].CI107 B on A.CD_ITEM = B.CD_ITEM and A.CD_GRUPO = B.CD_GRUPO and A.CD_SUBGRUPO = B.CD_SUBGRUPO
where A.CD_GRUPO = 6 and  LTRIM(RTRIM(A.CD_SUBGRUPO))  in (select LTRIM(RTRIM(CD_SUBGRUPO)) from DIM_LINHAS_SGE)
 


) AS Origem

--Condição: O produto existe nas 2 tabelas e o cliente também
ON (Destino.CD_FILIAL = Origem.CD_FILIAL and
    Destino.CD_ITEM = Origem.CD_ITEM	)

--Se a condição for obedecida, ou seja, existem registros nas duas tabelas
WHEN MATCHED THEN

    UPDATE SET Destino.DN_ITEM_COM = Origem.DN_ITEM_COM,
	           Destino.DN_ITEM_IND = Origem.DN_ITEM_IND,
	           Destino.CD_CLASSE_ABC = Origem.CD_CLASSE_ABC,
			   Destino.CD_CLASSIF = Origem.CD_CLASSIF,
			   Destino.CD_GRUPO = Origem.CD_GRUPO,
			   Destino.CD_SUBGRUPO = Origem.CD_SUBGRUPO,
			   Destino.CD_LINHA = Origem.CD_LINHA,
			   Destino.VL_CUSTO_INDUST = Origem.VL_CUSTO_INDUST,
			   Destino.TP_OBSOLETO_IND = Origem.TP_OBSOLETO_IND,
	           Destino.TP_OBSOLETO_COM = Origem.TP_OBSOLETO_COM,
	           Destino.CD_ORIG_MERCAD = Origem.CD_ORIG_MERCAD,
	           Destino.DT_SINC = Origem.DT_SINC

--Se a condição não foi obedecida porque o registro não existe na tabela de destino

WHEN NOT MATCHED BY TARGET THEN

    INSERT (CD_FILIAL,
            CD_ITEM,
	        DN_ITEM_COM,
	        DN_ITEM_IND, 
	        CD_CLASSE_ABC, 
	        CD_CLASSIF,
	        CD_GRUPO,
	        CD_SUBGRUPO,
	        CD_LINHA,
	        VL_CUSTO_INDUST,
	        TP_OBSOLETO_IND, 
	        TP_OBSOLETO_COM,
			CD_ORIG_MERCAD,
	        DT_SINC
			)

    VALUES (Origem.CD_FILIAL,
            Origem.CD_ITEM,
	        Origem.DN_ITEM_COM,
	        Origem.DN_ITEM_IND, 
	        Origem.CD_CLASSE_ABC, 
	        Origem.CD_CLASSIF,
	        Origem.CD_GRUPO,
	        Origem.CD_SUBGRUPO,
	        Origem.CD_LINHA,
	        Origem.VL_CUSTO_INDUST,
	        Origem.TP_OBSOLETO_IND, 
	        Origem.TP_OBSOLETO_COM,
			Origem.CD_ORIG_MERCAD,
			Origem.DT_SINC)

OUTPUT $action, Inserted.*, Deleted.*;





RETURN 0
GO
PRINT N'Creating [dbo].[DIM_LINHAS_SGE_MERGE]...';


GO
CREATE PROCEDURE [dbo].[DIM_LINHAS_SGE_MERGE]

AS
	MERGE [Auxiliar].[dbo].[DIM_LINHAS_SGE] AS Destino

USING 

(
select CD_GRUPO, CD_SUBGRUPO, DN_GRUPO,
 case CD_SUBGRUPO when '0' then 'O'
				  when '1' then 'E'
                  when '2' then 'E'
                  when '3' then 'E'
                  when '4' then 'E'
                  when '5' then 'E'
                  when '6' then 'E'
                  when '7' then 'E'
                  when '8' then 'E'
                  when '9' then 'E'
                  when '10' then 'E'
                  when '11' then 'E'
                  when '12' then 'E'
                  when '13' then 'X'
                  when '17' then 'E'
                  when '18' then 'E'
                  when '19' then 'E'
                  when '20' then 'E'
                  when '14' then 'E'
                  when '15' then 'E'
                  when '16' then 'E'
                  when '22' then 'I'
                  when '23' then 'I'
                  when '24' then 'I'
                  when '25' then 'I'
                  when '29' then 'E'
                  when '26' then 'E'
                  when '31' then 'E'
                  when '32' then 'I'
                  when '35' then 'I'
                  when '39' then 'I'
                  when '40' then 'E'
                  when '30' then 'E'
                  when '42' then 'I'
                  when '43' then 'I'
                  when '44' then 'I'
                  when '45' then 'E'
                  when '33' then 'E'
                  when '47' then 'E'
                  when '48' then 'I'
                  when '49' then 'E'
                  when '34' then 'E'
                  when '52' then 'E'
                  when '54' then 'E'
                  when '55' then 'E'
                  when '56' then 'E'
                  when '27' then 'E'
                  when '28' then 'E'
                  when '59' then 'I'
                  when '60' then 'A'
                  when '61' then 'E'
                  when '62' then 'O'
                  when '63' then 'E'
                  when '36' then 'E'
                  when '37' then 'E'
                  when '66' then 'E'
 else 'O'
 end
as CD_DIVISAO, CURRENT_TIMESTAMP as DT_SINC
from [fiscal].[dbo].GE005 where TP_APLICACAO='C' and CD_GRUPO=6

)
AS Origem

--Condição: O produto existe nas 2 tabelas e o cliente também

ON (Destino.CD_GRUPO = Origem.CD_GRUPO AND Destino.CD_SUBGRUPO = Origem.CD_SUBGRUPO)

--Se a condição for obedecida, ou seja, existem registros nas duas tabelas

WHEN MATCHED THEN

    UPDATE SET Destino.DN_GRUPO = Origem.DN_GRUPO,
			   Destino.CD_DIVISAO = Origem.CD_DIVISAO,
			   Destino.DT_SINC = Origem.DT_SINC

--Se a condição não foi obedecida porque o registro não existe na tabela de destino

WHEN NOT MATCHED BY TARGET THEN

    INSERT (CD_GRUPO,CD_SUBGRUPO,DN_GRUPO,CD_DIVISAO,DT_SINC)

    VALUES (Origem.CD_GRUPO, Origem.CD_SUBGRUPO,Origem.DN_GRUPO,Origem.CD_DIVISAO,Origem.DT_SINC)

OUTPUT $action, Inserted.*, Deleted.*;

RETURN 0
GO
PRINT N'Creating [dbo].[DIM_LINHAS_AGRUPADAS_MERGE]...';


GO
CREATE PROCEDURE [dbo].[DIM_LINHAS_AGRUPADAS_MERGE]

AS
	MERGE Auxiliar.dbo.DIM_LINHAS_AGRUPADAS AS Destino

USING (
select '0' as CD_LINHA_COTA, 'SEM CLASSIFICAÇÃO' as DN_LINHA_COTA, 'O' as CD_DIVISAO, CURRENT_TIMESTAMP as DT_SINC
union
select A.ID as CD_LINHA_COTA, A.NomeCota as DN_LINHA_COTA ,A.DIVISAO as CD_DIVISAO, CURRENT_TIMESTAMP as DT_SINC
from   INTRANET.dbo.COTA004 A
--where GestaoProdutos='SIM'
) AS Origem

--Condição: O produto existe nas 2 tabelas e o cliente também
ON (Destino.CD_LINHA_COTA = Origem.CD_LINHA_COTA)

--Se a condição for obedecida, ou seja, existem registros nas duas tabelas
WHEN MATCHED THEN

    UPDATE SET Destino.DN_LINHA_COTA = Origem.DN_LINHA_COTA,
			   Destino.CD_DIVISAO = Origem.CD_DIVISAO,
			   Destino.DT_SINC = Origem.DT_SINC

--Se a condição não foi obedecida porque o registro não existe na tabela de destino

WHEN NOT MATCHED BY TARGET THEN

    INSERT (CD_LINHA_COTA,DN_LINHA_COTA,CD_DIVISAO,DT_SINC)

    VALUES (Origem.CD_LINHA_COTA,Origem.DN_LINHA_COTA,Origem.CD_DIVISAO,Origem.DT_SINC)

OUTPUT $action, Inserted.*, Deleted.*;





RETURN 0
GO
PRINT N'Creating [dbo].[DIM_TEMPO_MERGE]...';


GO
CREATE PROCEDURE [dbo].[DIM_TEMPO_MERGE]

AS
	
/********************************************************************************************/
--Specify Start Date and End date here
--Value of Start Date Must be Less than Your End Date 

DECLARE @DIMDATE TABLE
	(	[Cod_Dia] NVARCHAR(50) primary key, 
		[Data] DATE,
		[Cod_Semana] int,-- 01,02,03 .... 42,43,44
		[Nome_Dia_Semana] NVARCHAR(50),-- Segunda, terça, quarta, quinta, sexta
		[Cod_Mes] int,-- 01,02,03 ... , 11, 12
		[Nome_Mes] NVARCHAR(50),-- Janeiro, Fevereiro, Março, ... Novembro, Dezembro
		[Cod_Mes_Ano] NVARCHAR(50),-- 2017-01, 2017-02, ..., 2017-11, 2017-12
		[Nome_Mes_Ano] NVARCHAR(50),-- Janeiro 2017, Fevereiro 2017, ....
		[Cod_Trimestre] int,-- 01, 02, 03, 04
		[Nome_Trimestre] NVARCHAR(50),-- Primeiro Trimestre, Segundo Trimestre, ...
		[Cod_Trimestre_Ano] NVARCHAR(50),-- 2017-01, 2017-02, ...
		[Nome_Trimestre_Ano] NVARCHAR(50),-- Primeiro Trimestre 2017, Segundo Trimestre 2017, ...
		[Cod_Semestre] int,-- 01, 02, ...
		[Nome_Semestre] NVARCHAR(50),-- Primeiro Semestre, Segundo Semestre, ...
		[Cod_Semestre_Ano] NVARCHAR(50),-- 2017-01, 2017-02, ...
		[Nome_Semestre_Ano] NVARCHAR(50),-- Primeiro Semestre, Segundo Semestre, ...
		[Ano] NVARCHAR(50),-- 2017, ...
		[Tipo_Dia] NVARCHAR(50), -- Dia Útil ou Fim de Semana
		[Dia] NVARCHAR(2) -- Dia Útil ou Fim de Semana
	)

DECLARE @AnoInicial VARCHAR(4) = '1920'
DECLARE @MesInicial VARCHAR(2) = '1'
DECLARE @AnoFinal VARCHAR(4) = convert(varchar(4),YEAR(CURRENT_TIMESTAMP))
DECLARE @MesFinal VARCHAR(2) = convert(varchar(2),MONTH(CURRENT_TIMESTAMP))

DECLARE @StartDate DATETIME
Select @StartDate = CAST(@AnoInicial + '/' + @MesInicial + '/01' AS DATETIME)

DECLARE @EndDate DATETIME 
SELECT @EndDate = DATEADD(month, ((CAST(@AnoFinal AS INTEGER) - 1900) * 12) + CAST(@MesFinal AS INTEGER), 0)

--Temporary Variables To Hold the Values During Processing of Each Date of Year
DECLARE
	@DayOfWeekInMonth INT,
	@DayOfWeekInYear INT,
	@DayOfQuarter INT,
	@WeekOfMonth INT,
	@CurrentYear INT,
	@CurrentMonth INT,
	@CurrentQuarter INT

/*Table Data type to store the day of week count for the month and year*/
DECLARE @DayOfWeek TABLE (DOW INT, MonthCount INT, QuarterCount INT, YearCount INT)

INSERT INTO @DayOfWeek VALUES (1, 0, 0, 0)
INSERT INTO @DayOfWeek VALUES (2, 0, 0, 0)
INSERT INTO @DayOfWeek VALUES (3, 0, 0, 0)
INSERT INTO @DayOfWeek VALUES (4, 0, 0, 0)
INSERT INTO @DayOfWeek VALUES (5, 0, 0, 0)
INSERT INTO @DayOfWeek VALUES (6, 0, 0, 0)
INSERT INTO @DayOfWeek VALUES (7, 0, 0, 0)

--Extract and assign various parts of Values from Current Date to Variable

DECLARE @CurrentDate AS DATETIME = @StartDate
SET @CurrentMonth = DATEPART(MM, @CurrentDate)
SET @CurrentYear = DATEPART(YY, @CurrentDate)
SET @CurrentQuarter = DATEPART(QQ, @CurrentDate)

/********************************************************************************************/
--Proceed only if Start Date(Current date ) is less than End date you specified above

WHILE @CurrentDate < @EndDate
BEGIN
 
/*Begin day of week logic*/

         /*Check for Change in Month of the Current date if Month changed then 
          Change variable value*/
	IF @CurrentMonth != DATEPART(MM, @CurrentDate) 
	BEGIN
		UPDATE @DayOfWeek
		SET MonthCount = 0
		SET @CurrentMonth = DATEPART(MM, @CurrentDate)
	END

        /* Check for Change in Quarter of the Current date if Quarter changed then change 
         Variable value*/

	IF @CurrentQuarter != DATEPART(QQ, @CurrentDate)
	BEGIN
		UPDATE @DayOfWeek
		SET QuarterCount = 0
		SET @CurrentQuarter = DATEPART(QQ, @CurrentDate)
	END
       
        /* Check for Change in Year of the Current date if Year changed then change 
         Variable value*/
	

	IF @CurrentYear != DATEPART(YY, @CurrentDate)
	BEGIN
		UPDATE @DayOfWeek
		SET YearCount = 0
		SET @CurrentYear = DATEPART(YY, @CurrentDate)
	END
	
        -- Set values in table data type created above from variables 

	UPDATE @DayOfWeek
	SET 
		MonthCount = MonthCount + 1,
		QuarterCount = QuarterCount + 1,
		YearCount = YearCount + 1
	WHERE DOW = DATEPART(DW, @CurrentDate)

	SELECT
		@DayOfWeekInMonth = MonthCount,
		@DayOfQuarter = QuarterCount,
		@DayOfWeekInYear = YearCount
	FROM @DayOfWeek
	WHERE DOW = DATEPART(DW, @CurrentDate)
	
/*End day of week logic*/


/* Populate Your Dimension Table with values*/
	
	INSERT INTO @DIMDATE
	SELECT	
		CONVERT (NVARCHAR(8),@CurrentDate,112) as Cod_Dia,
		@CurrentDate as Data,
		RIGHT ('00'+LTRIM(STR(CONVERT(NVARCHAR(2), @DayOfWeekInYear))),2 ) as Cod_Semana,
		CASE DATEPART(DW, @CurrentDate)
			WHEN 1 THEN 'Domingo'
			WHEN 2 THEN 'Segunda'
			WHEN 3 THEN 'Terça'
			WHEN 4 THEN 'Quarta'
			WHEN 5 THEN 'Quinta'
			WHEN 6 THEN 'Sexta'
			WHEN 7 THEN 'Sábado'
			END 
			AS D_Nome_Dia_Semana,
        RIGHT ('00'+LTRIM(STR(CONVERT(NVARCHAR(2), DATEPART(MM, @CurrentDate)))),2 )  as Cod_Mes,
		CASE DATEPART(MM, @CurrentDate)
			WHEN 1 THEN 'Janeiro'
			WHEN 2 THEN 'Fevereiro'
			WHEN 3 THEN 'Março'
			WHEN 4 THEN 'Abril'
			WHEN 5 THEN 'Maio'
			WHEN 6 THEN 'Junho'
			WHEN 7 THEN 'Julho'
			WHEN 8 THEN 'Agosto'
			WHEN 9 THEN 'Setembro'
			WHEN 10 THEN 'Outubro'
			WHEN 11 THEN 'Novembro'
			WHEN 12 THEN 'Dezembro'
			END 
			AS D_Nome_Mes,
			RIGHT ('00'+LTRIM(STR(CONVERT(NVARCHAR(2), DATEPART(MM, @CurrentDate)))),2 ) + '-' + CONVERT(NVARCHAR(4), DATEPART(YEAR, @CurrentDate)) as Cod_Mes_Ano,
			CASE DATEPART(MM, @CurrentDate)
			WHEN 1 THEN 'Janeiro'
			WHEN 2 THEN 'Fevereiro'
			WHEN 3 THEN 'Março'
			WHEN 4 THEN 'Abril'
			WHEN 5 THEN 'Maio'
			WHEN 6 THEN 'Junho'
			WHEN 7 THEN 'Julho'
			WHEN 8 THEN 'Agosto'
			WHEN 9 THEN 'Setembro'
			WHEN 10 THEN 'Outubro'
			WHEN 11 THEN 'Novembro'
			WHEN 12 THEN 'Dezembro'
			END + ' ' + CONVERT(NVARCHAR(4), DATEPART(YEAR, @CurrentDate)) as D_Nome_Mes_Ano,
			RIGHT ('00'+LTRIM(STR(CONVERT(NVARCHAR(2), DATEPART(QQ, @CurrentDate)))),2 ) AS Cod_Trimestre,
			CASE DATEPART(QQ, @CurrentDate)
			WHEN 1 THEN 'Primeiro Trimestre'
			WHEN 2 THEN 'Segundo Trimestre'
			WHEN 3 THEN 'Terceiro Trimestre'
			WHEN 4 THEN 'Quarto Trimestre'
			END AS D_Nome_Trimestre,
			RIGHT ('00'+LTRIM(STR(CONVERT(NVARCHAR(2), DATEPART(QQ, @CurrentDate)))),2 ) + '-' + 
			CONVERT(NVARCHAR(4), DATEPART(YEAR, @CurrentDate)) as Cod_Trimestre_Ano,
			CASE DATEPART(QQ, @CurrentDate)
			WHEN 1 THEN 'Primeiro Trimestre'
			WHEN 2 THEN 'Segundo Trimestre'
			WHEN 3 THEN 'Terceiro Trimestre'
			WHEN 4 THEN 'Quarto Trimestre'
			END + ' ' + CONVERT(NVARCHAR(4), DATEPART(YEAR, @CurrentDate)) AS D_Nome_Trimestre_Ano,
			CASE DATEPART(QQ, @CurrentDate)
			WHEN 1 THEN '01'
			WHEN 2 THEN '01'
			WHEN 3 THEN '02'
			WHEN 4 THEN '02'
			END 
			AS Cod_Semestre,
			CASE DATEPART(QQ, @CurrentDate)
			WHEN 1 THEN 'Primeiro Semestre'
			WHEN 2 THEN 'Primeiro Semestre'
			WHEN 3 THEN 'Segundo Semestre'
			WHEN 4 THEN 'Segundo Semestre'
			END 
			AS D_Nome_Semestre,
			CASE DATEPART(QQ, @CurrentDate)
			WHEN 1 THEN '01'
			WHEN 2 THEN '01'
			WHEN 3 THEN '02'
			WHEN 4 THEN '02'
			END + '-' + 
			CONVERT(NVARCHAR(4), DATEPART(YEAR, @CurrentDate)) as Cod_Semestre_Ano,
			CASE DATEPART(QQ, @CurrentDate)
			WHEN 1 THEN 'Primeiro Semestre'
			WHEN 2 THEN 'Primeiro Semestre'
			WHEN 3 THEN 'Segundo Semestre'
			WHEN 4 THEN 'Segundo Semestre'
			END + ' ' + 
			CONVERT(NVARCHAR(4), DATEPART(YEAR, @CurrentDate)) as D_Nome_Semestre_Ano,
			CONVERT(NVARCHAR(4), DATEPART(YEAR, @CurrentDate)) AS Ano,
			CASE DATEPART(DW, @CurrentDate)
			WHEN 1 THEN 'Fim de Semana'
			WHEN 2 THEN 'Dia Útil'
			WHEN 3 THEN 'Dia Útil'
			WHEN 4 THEN 'Dia Útil'
			WHEN 5 THEN 'Dia Útil'
			WHEN 6 THEN 'Dia Útil'
			WHEN 7 THEN 'Fim de Semana'
			END 
			AS Tipo_Dia,
			CONVERT(NVARCHAR(2), DATEPART(DAY, @CurrentDate)) AS Dia

	SET @CurrentDate = DATEADD(DD, 1, @CurrentDate)
END



MERGE [Auxiliar].[dbo].[DIM_TEMPO] AS Destino

USING (SELECT * FROM @DIMDATE) AS Origem

--Condição: O produto existe nas 2 tabelas e o cliente também
ON (Destino.Cod_Dia = Origem.Cod_Dia)

--Se a condição for obedecida, ou seja, existem registros nas duas tabelas
--WHEN MATCHED THEN
    --UPDATE SET Destino.LastPurchaseDate = Origem.PurchaseDate
--Se a condição não foi obedecida porque o registro não existe na tabela de destino

WHEN NOT MATCHED BY TARGET THEN

    INSERT ([Cod_Dia], [Data], [Cod_Semana], [Nome_dia_Semana], [Cod_Mes], [Nome_Mes], [Cod_Mes_Ano], [Nome_Mes_Ano], [Cod_Trimestre], [Nome_Trimestre], [Cod_Trimestre_Ano], [Nome_Trimestre_Ano], [Cod_Semestre], [Nome_Semestre], [Cod_Semestre_Ano], [Nome_Semestre_Ano], [Ano], [Tipo_Dia],[Dia])

    VALUES (Origem.[Cod_Dia], 
	        Origem.[Data], 
			Origem.[Cod_Semana], 
			Origem.[Nome_dia_Semana], 
			Origem.[Cod_Mes], 
			Origem.[Nome_Mes], 
			Origem.[Cod_Mes_Ano], 
			Origem.[Nome_Mes_Ano], 
			Origem.[Cod_Trimestre], 
			Origem.[Nome_Trimestre], 
			Origem.[Cod_Trimestre_Ano], 
			Origem.[Nome_Trimestre_Ano], 
			Origem.[Cod_Semestre], 
			Origem.[Nome_Semestre], 
			Origem.[Cod_Semestre_Ano], 
			Origem.[Nome_Semestre_Ano], 
			Origem.[Ano], [Tipo_Dia],
			Origem.[Dia])

OUTPUT $action, Inserted.*, Deleted.*;
RETURN 0
GO
PRINT N'Creating [dbo].[DIM_CLIENTE_MERGE]...';


GO
CREATE PROCEDURE [dbo].[DIM_CLIENTE_MERGE]

AS
	MERGE [Auxiliar].[dbo].[DIM_CLIENTE] AS Destino

USING 

(select A.CD_CLIENTE,
	   A.CD_CGCCPF,
	   A.DN_FANTASIA,
	   B.CD_MUNICIPIO,
	   C.DN_MUNICIPIO,
	   B.DN_BAIRRO,
	   B.CD_CEP,
	   B.NR_ENDERECO,
	   C.CD_UF,
	   D.DN_UF,
	   A.TP_SITUACAO as TP_SITUACAO_SGE,
	   A.VL_LIMITE_CRED,
	   convert(date,B.DT_IMPLANTACAO) as DT_IMPLANTACAO,
	   B.CD_CNAE as CD_CNAE,
	   CURRENT_TIMESTAMP as  DT_SINC
from [FISCAL].[dbo].GE023 A
left join [FISCAL].[dbo].GE010 B on A.CD_CGCCPF = B.CD_CGCCPF
left join [FISCAL].[dbo].GE013 C on B.CD_MUNICIPIO = C.CD_MUNICIPIO
left join [FISCAL].[dbo].GE012 D on C.CD_UF = D.CD_UF and D.CD_PAIS='0001')

AS Origem

--Verificar alteraçãoes no cliente
ON (Destino.CD_CLIENTE = Origem.CD_CLIENTE AND 
    Destino.CD_CGCCPF = Origem.CD_CGCCPF 
	)

--Os campos que devem alterar
WHEN MATCHED THEN
    UPDATE SET Destino.CD_MUNICIPIO = Origem.CD_MUNICIPIO,
			   Destino.DN_MUNICIPIO = Origem.DN_MUNICIPIO,
			   Destino.DN_BAIRRO = Origem.DN_BAIRRO,
			   Destino.CD_CEP = Origem.CD_CEP,
			   Destino.NR_ENDERECO = Origem.NR_ENDERECO,
	           Destino.CD_UF = Origem.CD_UF,
	           Destino.DN_UF = Origem.DN_UF,
	           Destino.TP_SITUACAO_SGE  = Origem.TP_SITUACAO_SGE,
	           Destino.VL_LIMITE_CRED = Origem.VL_LIMITE_CRED,
			   Destino.DT_IMPLANTACAO = Origem.DT_IMPLANTACAO,
			   Destino.CD_CNAE = Origem.CD_CNAE,
	           Destino.DT_SINC  = Origem.DT_SINC

--Se a condição não foi obedecida porque o registro não existe na tabela de destino

WHEN NOT MATCHED BY TARGET THEN

    INSERT (CD_CLIENTE, CD_CGCCPF, DN_FANTASIA, CD_MUNICIPIO, DN_MUNICIPIO, DN_BAIRRO, CD_CEP, NR_ENDERECO, CD_UF, DN_UF, TP_SITUACAO_SGE, VL_LIMITE_CRED, DT_IMPLANTACAO,CD_CNAE, DT_SINC)

    VALUES (Origem.CD_CLIENTE, Origem.CD_CGCCPF, Origem.DN_FANTASIA, Origem.CD_MUNICIPIO, Origem.DN_MUNICIPIO, Origem.DN_BAIRRO, Origem.CD_CEP, Origem.NR_ENDERECO, Origem.CD_UF, Origem.DN_UF, Origem.TP_SITUACAO_SGE, Origem.VL_LIMITE_CRED, Origem.DT_IMPLANTACAO, Origem.CD_CNAE, Origem.DT_SINC)

OUTPUT $action, Inserted.*, Deleted.*;
RETURN 0
GO
PRINT N'Creating [dbo].[DIM_FILIAL_MERGE]...';


GO
CREATE PROCEDURE [dbo].[DIM_FILIAL_MERGE]
	
AS
MERGE [Auxiliar].[dbo].[DIM_FILIAL] AS Destino

USING (select CD_FILIAL, DN_FANTASIA,DN_RAZAO,CD_CGCCPF,CURRENT_TIMESTAMP as DT_SINC from [Fiscal].[dbo].[GE018]) AS Origem
ON (Destino.CD_FILIAL = Origem.CD_FILIAL AND Destino.DN_FANTASIA = Origem.DN_FANTASIA and Destino.DN_RAZAO = Origem.DN_RAZAO and Destino.CD_CGCCPF = Origem.CD_CGCCPF)

WHEN MATCHED THEN
    UPDATE SET Destino.DN_FANTASIA = Origem.DN_FANTASIA, Destino.DT_SINC=Origem.DT_SINC

WHEN NOT MATCHED BY TARGET THEN

    INSERT (CD_FILIAL, DN_FANTASIA, DN_RAZAO, CD_CGCCPF,DT_SINC)
    VALUES (Origem.CD_FILIAL, Origem.DN_FANTASIA, Origem.DN_RAZAO, Origem.CD_CGCCPF, Origem.DT_SINC)

OUTPUT $action, Inserted.*, Deleted.*;

RETURN 0
GO
PRINT N'Creating [dbo].[DIM_REGIAO_MERGE]...';


GO
CREATE PROCEDURE [dbo].[DIM_REGIAO_MERGE]
 as 
BEGIN TRANSACTION

MERGE [Auxiliar].dbo.DIM_REGIAO AS Destino

USING (select CD_REGIAO,DE_REGIAO as SUPERVISOR,DN_FANTASIA as DN_REGIAO,0 as CD_FUNC_RESP from fiscal.dbo.ge080)

AS Origem

--Condição: O produto existe nas 2 tabelas e o cliente também

ON (Destino.CD_REGIAO = Origem.CD_REGIAO)

--Se a condição for obedecida, ou seja, existem registros nas duas tabelas

WHEN MATCHED THEN

    UPDATE SET Destino.SUPERVISOR = Origem.SUPERVISOR,
			   Destino.DN_REGIAO = Origem.DN_REGIAO,
			   Destino.CD_FUNC_RESP = Origem.CD_FUNC_RESP

--Se a condição não foi obedecida porque o registro não existe na tabela de destino

WHEN NOT MATCHED BY TARGET THEN

    INSERT (CD_REGIAO,SUPERVISOR,DN_REGIAO,CD_FUNC_RESP)

    VALUES (Origem.CD_REGIAO,Origem.SUPERVISOR,Origem.DN_REGIAO,Origem.CD_FUNC_RESP)

OUTPUT $action, Inserted.*, Deleted.*;

RETURN 0
GO
PRINT N'Creating [dbo].[DIM_DIVISOES_MERGE]...';


GO
CREATE PROCEDURE [dbo].[DIM_DIVISOES_MERGE]
	
AS
	
MERGE [dbo].[DIM_DIVISOES] AS Destino

USING 
(select 'X' as CD_DIVISAO,'Exportação' as DN_DIVISAO,'pe-7s-way' as ICON, CURRENT_TIMESTAMP as DT_SINC
union
select 'I' as CD_DIVISAO,'Iluminação' as DN_DIVISAO,'pe-7s-light' as ICON, CURRENT_TIMESTAMP as DT_SINC 
union
select 'E' as CD_DIVISAO,'Material Elétrico' as DN_DIVISAO,'pe-7s-plug' as ICON, CURRENT_TIMESTAMP as DT_SINC 
union 
select 'T' as CD_DIVISAO,'Televendas' as DN_DIVISAO,'pe-7s-call' as ICON, CURRENT_TIMESTAMP as DT_SINC  
union
select 'O' as CD_DIVISAO,'Outros' as DN_DIVISAO,'pe-7s-help1' as icon, CURRENT_TIMESTAMP as DT_SINC  
union
select 'A' as CD_DIVISAO,'ABB' as DN_DIVISAO,'pe-7s-share' as ICON, CURRENT_TIMESTAMP as DT_SINC  
union
select 'M' as CD_DIVISAO,'Mercado' as DN_DIVISAO,'pe-7s-cart' as ICON, CURRENT_TIMESTAMP as DT_SINC 
union 
select 'F' as CD_DIVISAO,'Funcionários' as DN_DIVISAO,'pe-7s-users' as ICON, CURRENT_TIMESTAMP as DT_SINC 
union 
select 'C' as CD_DIVISAO,'Construção Civil' as DN_DIVISAO,'pe-7s-culture' as ICON, CURRENT_TIMESTAMP as DT_SINC
union 
select 'W' as CD_DIVISAO,'Vendas OnLine' as DN_DIVISAO,'pe-7s-global' as ICON, CURRENT_TIMESTAMP as DT_SINC
union 
select 'D' as CD_DIVISAO,'Venda direta' as DN_DIVISAO,'pe-7s-pin' as ICON, CURRENT_TIMESTAMP as DT_SINC)

AS Origem
--Condição: O produto existe nas 2 tabelas e o cliente também
 ON (Destino.CD_DIVISAO = Origem.CD_DIVISAO)

--Se a condição for obedecida, ou seja, existem registros nas duas tabelas
WHEN MATCHED THEN
    UPDATE SET Destino.CD_DIVISAO = Origem.CD_DIVISAO,
			   Destino.DN_DIVISAO = Origem.DN_DIVISAO,
			   Destino.ICON = Origem.ICON,
			   Destino.DT_SINC = Origem.DT_SINC

--Se a condição não foi obedecida porque o registro não existe na tabela de destino
WHEN NOT MATCHED BY TARGET THEN
    INSERT (CD_DIVISAO, DN_DIVISAO, DT_SINC)
    VALUES (Origem.CD_DIVISAO, Origem.DN_DIVISAO,Origem.DT_SINC)

OUTPUT $action, Inserted.*, Deleted.*;
										

RETURN 0
GO
-- Refactoring step to update target server with deployed transaction logs

IF OBJECT_ID(N'dbo.__RefactorLog') IS NULL
BEGIN
    CREATE TABLE [dbo].[__RefactorLog] (OperationKey UNIQUEIDENTIFIER NOT NULL PRIMARY KEY)
    EXEC sp_addextendedproperty N'microsoft_database_tools_support', N'refactoring log', N'schema', N'dbo', N'table', N'__RefactorLog'
END
GO
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '9fcec65a-8a57-44cc-be23-462e80cd03a5')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('9fcec65a-8a57-44cc-be23-462e80cd03a5')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '4ad20753-2a7c-48cf-b02f-13ad4a1de088')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('4ad20753-2a7c-48cf-b02f-13ad4a1de088')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'cbb73f3d-6687-40ed-a325-88e36d54f9ef')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('cbb73f3d-6687-40ed-a325-88e36d54f9ef')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '74f1be31-0341-4375-b1b4-4328d099d38b')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('74f1be31-0341-4375-b1b4-4328d099d38b')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'ead72c12-1c1b-403e-9f43-1b54e9b43bec')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('ead72c12-1c1b-403e-9f43-1b54e9b43bec')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '9481b11b-edab-4c7d-beb6-ecbc35e275fb')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('9481b11b-edab-4c7d-beb6-ecbc35e275fb')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'c9e10eee-7a11-4699-8fb8-c86d292b3f28')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('c9e10eee-7a11-4699-8fb8-c86d292b3f28')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '057e8583-375b-4259-9010-e064e8f0dd66')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('057e8583-375b-4259-9010-e064e8f0dd66')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '147f6a67-4f0a-4270-8b39-3bdb21b96428')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('147f6a67-4f0a-4270-8b39-3bdb21b96428')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '162d6e5b-bd3b-4d01-95e6-ce6d863e5c2e')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('162d6e5b-bd3b-4d01-95e6-ce6d863e5c2e')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '562b0b27-a35c-4722-ad58-394efd3507ff')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('562b0b27-a35c-4722-ad58-394efd3507ff')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'ffbd9db3-8213-4abe-b13a-a816b20ac019')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('ffbd9db3-8213-4abe-b13a-a816b20ac019')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'a4ebd05b-8876-403f-a27b-94f1767ae40e')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('a4ebd05b-8876-403f-a27b-94f1767ae40e')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '5299d496-d605-4f6b-8ae3-7bfec8168fe3')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('5299d496-d605-4f6b-8ae3-7bfec8168fe3')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'a1423f7d-e606-4852-b021-d0e9df3939c8')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('a1423f7d-e606-4852-b021-d0e9df3939c8')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'c646a675-67d5-4591-beb4-0aa015a4db01')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('c646a675-67d5-4591-beb4-0aa015a4db01')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'd11e0d82-8703-401d-ad8e-b94443d68932')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('d11e0d82-8703-401d-ad8e-b94443d68932')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '16267513-7885-44d3-9459-8d8147636f93')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('16267513-7885-44d3-9459-8d8147636f93')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '6bcf523a-14ea-479a-a4d7-8376ac408e65')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('6bcf523a-14ea-479a-a4d7-8376ac408e65')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '13d05303-d670-4589-b1d8-11f3b61f7420')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('13d05303-d670-4589-b1d8-11f3b61f7420')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'cb3951c3-0d49-4b25-8349-39c345e474b6')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('cb3951c3-0d49-4b25-8349-39c345e474b6')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'ed5cac98-bbca-48dc-8e23-e672c4d818ca')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('ed5cac98-bbca-48dc-8e23-e672c4d818ca')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '8564cc18-ab69-4af4-9f95-3067c0946f6a')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('8564cc18-ab69-4af4-9f95-3067c0946f6a')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'a23994ca-1ed5-419c-8972-dcd581188c1b')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('a23994ca-1ed5-419c-8972-dcd581188c1b')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'faf97d44-b34a-46f7-83ba-8a671594c2bc')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('faf97d44-b34a-46f7-83ba-8a671594c2bc')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '387ba600-a880-4bd7-809c-58e124948cc0')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('387ba600-a880-4bd7-809c-58e124948cc0')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '93f1dac3-901d-432e-8822-ddeaf06c90c2')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('93f1dac3-901d-432e-8822-ddeaf06c90c2')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'ff4caba7-7065-43c6-b1f9-57c215f6eb62')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('ff4caba7-7065-43c6-b1f9-57c215f6eb62')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '31870169-b234-4b59-a910-72f229bbef51')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('31870169-b234-4b59-a910-72f229bbef51')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'fefdb80e-9b0c-4a05-a5b0-f7af6d669640')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('fefdb80e-9b0c-4a05-a5b0-f7af6d669640')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '0c419477-8dd7-4e93-9c71-e7bec8e8bf1e')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('0c419477-8dd7-4e93-9c71-e7bec8e8bf1e')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'ff3c197b-0f42-4d5c-8a56-97b12ff67a13')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('ff3c197b-0f42-4d5c-8a56-97b12ff67a13')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '731564d6-041d-42ee-a754-68e17032b440')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('731564d6-041d-42ee-a754-68e17032b440')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '204df8f4-b78f-442a-84a5-0c89368f3e1a')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('204df8f4-b78f-442a-84a5-0c89368f3e1a')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '62105a64-a117-41c1-b78f-efb03f86eb99')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('62105a64-a117-41c1-b78f-efb03f86eb99')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'f910433b-2459-4b74-b144-a5672ef97d17')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('f910433b-2459-4b74-b144-a5672ef97d17')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '43c553c2-f7b4-43bc-80d3-a1a405933dc3')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('43c553c2-f7b4-43bc-80d3-a1a405933dc3')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'bdd88998-5efd-4191-abc5-073a63c273f7')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('bdd88998-5efd-4191-abc5-073a63c273f7')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '5f8b07dc-acfe-43a6-a44a-3a1b6ab77d4e')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('5f8b07dc-acfe-43a6-a44a-3a1b6ab77d4e')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '22536a80-8eac-45b6-8968-477be3ac3214')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('22536a80-8eac-45b6-8968-477be3ac3214')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '9fc6a41a-1ee5-451a-9fbb-feaefd45e2a1')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('9fc6a41a-1ee5-451a-9fbb-feaefd45e2a1')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'e3a78ed9-20bf-4b1e-8480-61d8772e5778')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('e3a78ed9-20bf-4b1e-8480-61d8772e5778')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'c9f406dd-3b75-4c68-8860-15351ea6d207')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('c9f406dd-3b75-4c68-8860-15351ea6d207')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '2261b30e-a117-4dba-9801-077342e0bce6')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('2261b30e-a117-4dba-9801-077342e0bce6')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '2a3f9c78-6b47-473b-bfb1-a8f14e678946')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('2a3f9c78-6b47-473b-bfb1-a8f14e678946')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '4e073daf-74ae-4ba4-94bd-eef6520b9081')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('4e073daf-74ae-4ba4-94bd-eef6520b9081')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'f0e6b270-59c8-48d3-92c6-80608d824170')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('f0e6b270-59c8-48d3-92c6-80608d824170')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'e8b45d92-f06f-491c-8f5d-48a4a018be93')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('e8b45d92-f06f-491c-8f5d-48a4a018be93')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'ad12cf3b-e7ed-4b41-9117-3bdec408a1a3')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('ad12cf3b-e7ed-4b41-9117-3bdec408a1a3')

GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET MULTI_USER 
    WITH ROLLBACK IMMEDIATE;


GO
PRINT N'Update complete.';


GO
